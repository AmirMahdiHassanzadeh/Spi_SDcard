
Spi_sdcard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002274  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002458  08002458  00012458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002478  08002478  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08002478  08002478  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002478  08002478  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002478  08002478  00012478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800247c  0800247c  0001247c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08002480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c4  20000024  080024a4  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009e8  080024a4  000209e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097c7  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c5e  00000000  00000000  00029814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0002b478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000620  00000000  00000000  0002bb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019327  00000000  00000000  0002c190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000088bc  00000000  00000000  000454b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fc4b  00000000  00000000  0004dd73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dd9be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019d8  00000000  00000000  000dda14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000024 	.word	0x20000024
 8000200:	00000000 	.word	0x00000000
 8000204:	08002440 	.word	0x08002440

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000028 	.word	0x20000028
 8000220:	08002440 	.word	0x08002440

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f000 f998 	bl	800055c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f807 	bl	800023e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f000 f880 	bl	8000334 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000234:	f000 f848 	bl	80002c8 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000238:	f001 fb36 	bl	80018a8 <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800023c:	e7fe      	b.n	800023c <main+0x18>

0800023e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023e:	b580      	push	{r7, lr}
 8000240:	b090      	sub	sp, #64	; 0x40
 8000242:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000244:	f107 0318 	add.w	r3, r7, #24
 8000248:	2228      	movs	r2, #40	; 0x28
 800024a:	2100      	movs	r1, #0
 800024c:	4618      	mov	r0, r3
 800024e:	f002 f8ef 	bl	8002430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	605a      	str	r2, [r3, #4]
 800025a:	609a      	str	r2, [r3, #8]
 800025c:	60da      	str	r2, [r3, #12]
 800025e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000260:	2301      	movs	r3, #1
 8000262:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000264:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000268:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026e:	2301      	movs	r3, #1
 8000270:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000272:	2302      	movs	r3, #2
 8000274:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000276:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800027c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000280:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000282:	f107 0318 	add.w	r3, r7, #24
 8000286:	4618      	mov	r0, r3
 8000288:	f000 fc5a 	bl	8000b40 <HAL_RCC_OscConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000292:	f000 f88d 	bl	80003b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000296:	230f      	movs	r3, #15
 8000298:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029a:	2302      	movs	r3, #2
 800029c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2102      	movs	r1, #2
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 fec5 	bl	8001040 <HAL_RCC_ClockConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002bc:	f000 f878 	bl	80003b0 <Error_Handler>
  }
}
 80002c0:	bf00      	nop
 80002c2:	3740      	adds	r7, #64	; 0x40
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002cc:	4b17      	ldr	r3, [pc, #92]	; (800032c <MX_SPI1_Init+0x64>)
 80002ce:	4a18      	ldr	r2, [pc, #96]	; (8000330 <MX_SPI1_Init+0x68>)
 80002d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002d2:	4b16      	ldr	r3, [pc, #88]	; (800032c <MX_SPI1_Init+0x64>)
 80002d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002da:	4b14      	ldr	r3, [pc, #80]	; (800032c <MX_SPI1_Init+0x64>)
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002e0:	4b12      	ldr	r3, [pc, #72]	; (800032c <MX_SPI1_Init+0x64>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002e6:	4b11      	ldr	r3, [pc, #68]	; (800032c <MX_SPI1_Init+0x64>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002ec:	4b0f      	ldr	r3, [pc, #60]	; (800032c <MX_SPI1_Init+0x64>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002f2:	4b0e      	ldr	r3, [pc, #56]	; (800032c <MX_SPI1_Init+0x64>)
 80002f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80002fa:	4b0c      	ldr	r3, [pc, #48]	; (800032c <MX_SPI1_Init+0x64>)
 80002fc:	2238      	movs	r2, #56	; 0x38
 80002fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000300:	4b0a      	ldr	r3, [pc, #40]	; (800032c <MX_SPI1_Init+0x64>)
 8000302:	2200      	movs	r2, #0
 8000304:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000306:	4b09      	ldr	r3, [pc, #36]	; (800032c <MX_SPI1_Init+0x64>)
 8000308:	2200      	movs	r2, #0
 800030a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800030c:	4b07      	ldr	r3, [pc, #28]	; (800032c <MX_SPI1_Init+0x64>)
 800030e:	2200      	movs	r2, #0
 8000310:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000312:	4b06      	ldr	r3, [pc, #24]	; (800032c <MX_SPI1_Init+0x64>)
 8000314:	220a      	movs	r2, #10
 8000316:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000318:	4804      	ldr	r0, [pc, #16]	; (800032c <MX_SPI1_Init+0x64>)
 800031a:	f000 fff9 	bl	8001310 <HAL_SPI_Init>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000324:	f000 f844 	bl	80003b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	200002e8 	.word	0x200002e8
 8000330:	40013000 	.word	0x40013000

08000334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b086      	sub	sp, #24
 8000338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033a:	f107 0308 	add.w	r3, r7, #8
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000348:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <MX_GPIO_Init+0x74>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a16      	ldr	r2, [pc, #88]	; (80003a8 <MX_GPIO_Init+0x74>)
 800034e:	f043 0320 	orr.w	r3, r3, #32
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <MX_GPIO_Init+0x74>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0320 	and.w	r3, r3, #32
 800035c:	607b      	str	r3, [r7, #4]
 800035e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000360:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <MX_GPIO_Init+0x74>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a10      	ldr	r2, [pc, #64]	; (80003a8 <MX_GPIO_Init+0x74>)
 8000366:	f043 0304 	orr.w	r3, r3, #4
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <MX_GPIO_Init+0x74>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0304 	and.w	r3, r3, #4
 8000374:	603b      	str	r3, [r7, #0]
 8000376:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD1_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2111      	movs	r1, #17
 800037c:	480b      	ldr	r0, [pc, #44]	; (80003ac <MX_GPIO_Init+0x78>)
 800037e:	f000 fbc7 	bl	8000b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|SD_CS_Pin;
 8000382:	2311      	movs	r3, #17
 8000384:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000386:	2301      	movs	r3, #1
 8000388:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038a:	2300      	movs	r3, #0
 800038c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038e:	2302      	movs	r3, #2
 8000390:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000392:	f107 0308 	add.w	r3, r7, #8
 8000396:	4619      	mov	r1, r3
 8000398:	4804      	ldr	r0, [pc, #16]	; (80003ac <MX_GPIO_Init+0x78>)
 800039a:	f000 fa25 	bl	80007e8 <HAL_GPIO_Init>

}
 800039e:	bf00      	nop
 80003a0:	3718      	adds	r7, #24
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40021000 	.word	0x40021000
 80003ac:	40010800 	.word	0x40010800

080003b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b4:	b672      	cpsid	i
}
 80003b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003b8:	e7fe      	b.n	80003b8 <Error_Handler+0x8>
	...

080003bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003c2:	4b15      	ldr	r3, [pc, #84]	; (8000418 <HAL_MspInit+0x5c>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	4a14      	ldr	r2, [pc, #80]	; (8000418 <HAL_MspInit+0x5c>)
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	6193      	str	r3, [r2, #24]
 80003ce:	4b12      	ldr	r3, [pc, #72]	; (8000418 <HAL_MspInit+0x5c>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	f003 0301 	and.w	r3, r3, #1
 80003d6:	60bb      	str	r3, [r7, #8]
 80003d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003da:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <HAL_MspInit+0x5c>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	4a0e      	ldr	r2, [pc, #56]	; (8000418 <HAL_MspInit+0x5c>)
 80003e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e4:	61d3      	str	r3, [r2, #28]
 80003e6:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <HAL_MspInit+0x5c>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003f2:	4b0a      	ldr	r3, [pc, #40]	; (800041c <HAL_MspInit+0x60>)
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	4a04      	ldr	r2, [pc, #16]	; (800041c <HAL_MspInit+0x60>)
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040e:	bf00      	nop
 8000410:	3714      	adds	r7, #20
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr
 8000418:	40021000 	.word	0x40021000
 800041c:	40010000 	.word	0x40010000

08000420 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b088      	sub	sp, #32
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
 8000434:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a1b      	ldr	r2, [pc, #108]	; (80004a8 <HAL_SPI_MspInit+0x88>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d12f      	bne.n	80004a0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000440:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <HAL_SPI_MspInit+0x8c>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a19      	ldr	r2, [pc, #100]	; (80004ac <HAL_SPI_MspInit+0x8c>)
 8000446:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b17      	ldr	r3, [pc, #92]	; (80004ac <HAL_SPI_MspInit+0x8c>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000454:	60fb      	str	r3, [r7, #12]
 8000456:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000458:	4b14      	ldr	r3, [pc, #80]	; (80004ac <HAL_SPI_MspInit+0x8c>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a13      	ldr	r2, [pc, #76]	; (80004ac <HAL_SPI_MspInit+0x8c>)
 800045e:	f043 0304 	orr.w	r3, r3, #4
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b11      	ldr	r3, [pc, #68]	; (80004ac <HAL_SPI_MspInit+0x8c>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0304 	and.w	r3, r3, #4
 800046c:	60bb      	str	r3, [r7, #8]
 800046e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000470:	23a0      	movs	r3, #160	; 0xa0
 8000472:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000474:	2302      	movs	r3, #2
 8000476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000478:	2303      	movs	r3, #3
 800047a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047c:	f107 0310 	add.w	r3, r7, #16
 8000480:	4619      	mov	r1, r3
 8000482:	480b      	ldr	r0, [pc, #44]	; (80004b0 <HAL_SPI_MspInit+0x90>)
 8000484:	f000 f9b0 	bl	80007e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000488:	2340      	movs	r3, #64	; 0x40
 800048a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800048c:	2300      	movs	r3, #0
 800048e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000490:	2300      	movs	r3, #0
 8000492:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	4619      	mov	r1, r3
 800049a:	4805      	ldr	r0, [pc, #20]	; (80004b0 <HAL_SPI_MspInit+0x90>)
 800049c:	f000 f9a4 	bl	80007e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80004a0:	bf00      	nop
 80004a2:	3720      	adds	r7, #32
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40013000 	.word	0x40013000
 80004ac:	40021000 	.word	0x40021000
 80004b0:	40010800 	.word	0x40010800

080004b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <NMI_Handler+0x4>

080004ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004be:	e7fe      	b.n	80004be <HardFault_Handler+0x4>

080004c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <MemManage_Handler+0x4>

080004c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ca:	e7fe      	b.n	80004ca <BusFault_Handler+0x4>

080004cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <UsageFault_Handler+0x4>

080004d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr

080004ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc80      	pop	{r7}
 80004f4:	4770      	bx	lr

080004f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004fa:	f000 f875 	bl	80005e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}

08000502 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000506:	bf00      	nop
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr
	...

08000510 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000510:	480c      	ldr	r0, [pc, #48]	; (8000544 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000512:	490d      	ldr	r1, [pc, #52]	; (8000548 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000514:	4a0d      	ldr	r2, [pc, #52]	; (800054c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000518:	e002      	b.n	8000520 <LoopCopyDataInit>

0800051a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800051c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051e:	3304      	adds	r3, #4

08000520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000524:	d3f9      	bcc.n	800051a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000526:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000528:	4c0a      	ldr	r4, [pc, #40]	; (8000554 <LoopFillZerobss+0x22>)
  movs r3, #0
 800052a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800052c:	e001      	b.n	8000532 <LoopFillZerobss>

0800052e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000530:	3204      	adds	r2, #4

08000532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000534:	d3fb      	bcc.n	800052e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000536:	f7ff ffe4 	bl	8000502 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800053a:	f001 ff55 	bl	80023e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800053e:	f7ff fe71 	bl	8000224 <main>
  bx lr
 8000542:	4770      	bx	lr
  ldr r0, =_sdata
 8000544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000548:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800054c:	08002480 	.word	0x08002480
  ldr r2, =_sbss
 8000550:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000554:	200009e8 	.word	0x200009e8

08000558 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000558:	e7fe      	b.n	8000558 <ADC1_2_IRQHandler>
	...

0800055c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <HAL_Init+0x28>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <HAL_Init+0x28>)
 8000566:	f043 0310 	orr.w	r3, r3, #16
 800056a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800056c:	2003      	movs	r0, #3
 800056e:	f000 f907 	bl	8000780 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000572:	200f      	movs	r0, #15
 8000574:	f000 f808 	bl	8000588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000578:	f7ff ff20 	bl	80003bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800057c:	2300      	movs	r3, #0
}
 800057e:	4618      	mov	r0, r3
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40022000 	.word	0x40022000

08000588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000590:	4b12      	ldr	r3, [pc, #72]	; (80005dc <HAL_InitTick+0x54>)
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <HAL_InitTick+0x58>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	4619      	mov	r1, r3
 800059a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059e:	fbb3 f3f1 	udiv	r3, r3, r1
 80005a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 f911 	bl	80007ce <HAL_SYSTICK_Config>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005b2:	2301      	movs	r3, #1
 80005b4:	e00e      	b.n	80005d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2b0f      	cmp	r3, #15
 80005ba:	d80a      	bhi.n	80005d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005bc:	2200      	movs	r2, #0
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	f04f 30ff 	mov.w	r0, #4294967295
 80005c4:	f000 f8e7 	bl	8000796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <HAL_InitTick+0x5c>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005ce:	2300      	movs	r3, #0
 80005d0:	e000      	b.n	80005d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005d2:	2301      	movs	r3, #1
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000000 	.word	0x20000000
 80005e0:	20000008 	.word	0x20000008
 80005e4:	20000004 	.word	0x20000004

080005e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <HAL_IncTick+0x1c>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <HAL_IncTick+0x20>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4413      	add	r3, r2
 80005f8:	4a03      	ldr	r2, [pc, #12]	; (8000608 <HAL_IncTick+0x20>)
 80005fa:	6013      	str	r3, [r2, #0]
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	20000008 	.word	0x20000008
 8000608:	20000578 	.word	0x20000578

0800060c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  return uwTick;
 8000610:	4b02      	ldr	r3, [pc, #8]	; (800061c <HAL_GetTick+0x10>)
 8000612:	681b      	ldr	r3, [r3, #0]
}
 8000614:	4618      	mov	r0, r3
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	20000578 	.word	0x20000578

08000620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f003 0307 	and.w	r3, r3, #7
 800062e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <__NVIC_SetPriorityGrouping+0x44>)
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000636:	68ba      	ldr	r2, [r7, #8]
 8000638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800063c:	4013      	ands	r3, r2
 800063e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800064c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000652:	4a04      	ldr	r2, [pc, #16]	; (8000664 <__NVIC_SetPriorityGrouping+0x44>)
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	60d3      	str	r3, [r2, #12]
}
 8000658:	bf00      	nop
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <__NVIC_GetPriorityGrouping+0x18>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	0a1b      	lsrs	r3, r3, #8
 8000672:	f003 0307 	and.w	r3, r3, #7
}
 8000676:	4618      	mov	r0, r3
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	6039      	str	r1, [r7, #0]
 800068e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000694:	2b00      	cmp	r3, #0
 8000696:	db0a      	blt.n	80006ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	b2da      	uxtb	r2, r3
 800069c:	490c      	ldr	r1, [pc, #48]	; (80006d0 <__NVIC_SetPriority+0x4c>)
 800069e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a2:	0112      	lsls	r2, r2, #4
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	440b      	add	r3, r1
 80006a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006ac:	e00a      	b.n	80006c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	4908      	ldr	r1, [pc, #32]	; (80006d4 <__NVIC_SetPriority+0x50>)
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	f003 030f 	and.w	r3, r3, #15
 80006ba:	3b04      	subs	r3, #4
 80006bc:	0112      	lsls	r2, r2, #4
 80006be:	b2d2      	uxtb	r2, r2
 80006c0:	440b      	add	r3, r1
 80006c2:	761a      	strb	r2, [r3, #24]
}
 80006c4:	bf00      	nop
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	e000e100 	.word	0xe000e100
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d8:	b480      	push	{r7}
 80006da:	b089      	sub	sp, #36	; 0x24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ec:	69fb      	ldr	r3, [r7, #28]
 80006ee:	f1c3 0307 	rsb	r3, r3, #7
 80006f2:	2b04      	cmp	r3, #4
 80006f4:	bf28      	it	cs
 80006f6:	2304      	movcs	r3, #4
 80006f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	3304      	adds	r3, #4
 80006fe:	2b06      	cmp	r3, #6
 8000700:	d902      	bls.n	8000708 <NVIC_EncodePriority+0x30>
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	3b03      	subs	r3, #3
 8000706:	e000      	b.n	800070a <NVIC_EncodePriority+0x32>
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070c:	f04f 32ff 	mov.w	r2, #4294967295
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	fa02 f303 	lsl.w	r3, r2, r3
 8000716:	43da      	mvns	r2, r3
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	401a      	ands	r2, r3
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000720:	f04f 31ff 	mov.w	r1, #4294967295
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	fa01 f303 	lsl.w	r3, r1, r3
 800072a:	43d9      	mvns	r1, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	4313      	orrs	r3, r2
         );
}
 8000732:	4618      	mov	r0, r3
 8000734:	3724      	adds	r7, #36	; 0x24
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3b01      	subs	r3, #1
 8000748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800074c:	d301      	bcc.n	8000752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800074e:	2301      	movs	r3, #1
 8000750:	e00f      	b.n	8000772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000752:	4a0a      	ldr	r2, [pc, #40]	; (800077c <SysTick_Config+0x40>)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800075a:	210f      	movs	r1, #15
 800075c:	f04f 30ff 	mov.w	r0, #4294967295
 8000760:	f7ff ff90 	bl	8000684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <SysTick_Config+0x40>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <SysTick_Config+0x40>)
 800076c:	2207      	movs	r2, #7
 800076e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	e000e010 	.word	0xe000e010

08000780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff ff49 	bl	8000620 <__NVIC_SetPriorityGrouping>
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000796:	b580      	push	{r7, lr}
 8000798:	b086      	sub	sp, #24
 800079a:	af00      	add	r7, sp, #0
 800079c:	4603      	mov	r3, r0
 800079e:	60b9      	str	r1, [r7, #8]
 80007a0:	607a      	str	r2, [r7, #4]
 80007a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007a8:	f7ff ff5e 	bl	8000668 <__NVIC_GetPriorityGrouping>
 80007ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	68b9      	ldr	r1, [r7, #8]
 80007b2:	6978      	ldr	r0, [r7, #20]
 80007b4:	f7ff ff90 	bl	80006d8 <NVIC_EncodePriority>
 80007b8:	4602      	mov	r2, r0
 80007ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff5f 	bl	8000684 <__NVIC_SetPriority>
}
 80007c6:	bf00      	nop
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff ffb0 	bl	800073c <SysTick_Config>
 80007dc:	4603      	mov	r3, r0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b08b      	sub	sp, #44	; 0x2c
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007fa:	e179      	b.n	8000af0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007fc:	2201      	movs	r2, #1
 80007fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000800:	fa02 f303 	lsl.w	r3, r2, r3
 8000804:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	69fa      	ldr	r2, [r7, #28]
 800080c:	4013      	ands	r3, r2
 800080e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000810:	69ba      	ldr	r2, [r7, #24]
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	429a      	cmp	r2, r3
 8000816:	f040 8168 	bne.w	8000aea <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	4aa0      	ldr	r2, [pc, #640]	; (8000aa0 <HAL_GPIO_Init+0x2b8>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d05e      	beq.n	80008e2 <HAL_GPIO_Init+0xfa>
 8000824:	4a9e      	ldr	r2, [pc, #632]	; (8000aa0 <HAL_GPIO_Init+0x2b8>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d875      	bhi.n	8000916 <HAL_GPIO_Init+0x12e>
 800082a:	4a9e      	ldr	r2, [pc, #632]	; (8000aa4 <HAL_GPIO_Init+0x2bc>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d058      	beq.n	80008e2 <HAL_GPIO_Init+0xfa>
 8000830:	4a9c      	ldr	r2, [pc, #624]	; (8000aa4 <HAL_GPIO_Init+0x2bc>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d86f      	bhi.n	8000916 <HAL_GPIO_Init+0x12e>
 8000836:	4a9c      	ldr	r2, [pc, #624]	; (8000aa8 <HAL_GPIO_Init+0x2c0>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d052      	beq.n	80008e2 <HAL_GPIO_Init+0xfa>
 800083c:	4a9a      	ldr	r2, [pc, #616]	; (8000aa8 <HAL_GPIO_Init+0x2c0>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d869      	bhi.n	8000916 <HAL_GPIO_Init+0x12e>
 8000842:	4a9a      	ldr	r2, [pc, #616]	; (8000aac <HAL_GPIO_Init+0x2c4>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d04c      	beq.n	80008e2 <HAL_GPIO_Init+0xfa>
 8000848:	4a98      	ldr	r2, [pc, #608]	; (8000aac <HAL_GPIO_Init+0x2c4>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d863      	bhi.n	8000916 <HAL_GPIO_Init+0x12e>
 800084e:	4a98      	ldr	r2, [pc, #608]	; (8000ab0 <HAL_GPIO_Init+0x2c8>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d046      	beq.n	80008e2 <HAL_GPIO_Init+0xfa>
 8000854:	4a96      	ldr	r2, [pc, #600]	; (8000ab0 <HAL_GPIO_Init+0x2c8>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d85d      	bhi.n	8000916 <HAL_GPIO_Init+0x12e>
 800085a:	2b12      	cmp	r3, #18
 800085c:	d82a      	bhi.n	80008b4 <HAL_GPIO_Init+0xcc>
 800085e:	2b12      	cmp	r3, #18
 8000860:	d859      	bhi.n	8000916 <HAL_GPIO_Init+0x12e>
 8000862:	a201      	add	r2, pc, #4	; (adr r2, 8000868 <HAL_GPIO_Init+0x80>)
 8000864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000868:	080008e3 	.word	0x080008e3
 800086c:	080008bd 	.word	0x080008bd
 8000870:	080008cf 	.word	0x080008cf
 8000874:	08000911 	.word	0x08000911
 8000878:	08000917 	.word	0x08000917
 800087c:	08000917 	.word	0x08000917
 8000880:	08000917 	.word	0x08000917
 8000884:	08000917 	.word	0x08000917
 8000888:	08000917 	.word	0x08000917
 800088c:	08000917 	.word	0x08000917
 8000890:	08000917 	.word	0x08000917
 8000894:	08000917 	.word	0x08000917
 8000898:	08000917 	.word	0x08000917
 800089c:	08000917 	.word	0x08000917
 80008a0:	08000917 	.word	0x08000917
 80008a4:	08000917 	.word	0x08000917
 80008a8:	08000917 	.word	0x08000917
 80008ac:	080008c5 	.word	0x080008c5
 80008b0:	080008d9 	.word	0x080008d9
 80008b4:	4a7f      	ldr	r2, [pc, #508]	; (8000ab4 <HAL_GPIO_Init+0x2cc>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d013      	beq.n	80008e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008ba:	e02c      	b.n	8000916 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	623b      	str	r3, [r7, #32]
          break;
 80008c2:	e029      	b.n	8000918 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	3304      	adds	r3, #4
 80008ca:	623b      	str	r3, [r7, #32]
          break;
 80008cc:	e024      	b.n	8000918 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	68db      	ldr	r3, [r3, #12]
 80008d2:	3308      	adds	r3, #8
 80008d4:	623b      	str	r3, [r7, #32]
          break;
 80008d6:	e01f      	b.n	8000918 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	330c      	adds	r3, #12
 80008de:	623b      	str	r3, [r7, #32]
          break;
 80008e0:	e01a      	b.n	8000918 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d102      	bne.n	80008f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008ea:	2304      	movs	r3, #4
 80008ec:	623b      	str	r3, [r7, #32]
          break;
 80008ee:	e013      	b.n	8000918 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d105      	bne.n	8000904 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008f8:	2308      	movs	r3, #8
 80008fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	69fa      	ldr	r2, [r7, #28]
 8000900:	611a      	str	r2, [r3, #16]
          break;
 8000902:	e009      	b.n	8000918 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000904:	2308      	movs	r3, #8
 8000906:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	69fa      	ldr	r2, [r7, #28]
 800090c:	615a      	str	r2, [r3, #20]
          break;
 800090e:	e003      	b.n	8000918 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
          break;
 8000914:	e000      	b.n	8000918 <HAL_GPIO_Init+0x130>
          break;
 8000916:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	2bff      	cmp	r3, #255	; 0xff
 800091c:	d801      	bhi.n	8000922 <HAL_GPIO_Init+0x13a>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	e001      	b.n	8000926 <HAL_GPIO_Init+0x13e>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	3304      	adds	r3, #4
 8000926:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	2bff      	cmp	r3, #255	; 0xff
 800092c:	d802      	bhi.n	8000934 <HAL_GPIO_Init+0x14c>
 800092e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	e002      	b.n	800093a <HAL_GPIO_Init+0x152>
 8000934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000936:	3b08      	subs	r3, #8
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	210f      	movs	r1, #15
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	fa01 f303 	lsl.w	r3, r1, r3
 8000948:	43db      	mvns	r3, r3
 800094a:	401a      	ands	r2, r3
 800094c:	6a39      	ldr	r1, [r7, #32]
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	fa01 f303 	lsl.w	r3, r1, r3
 8000954:	431a      	orrs	r2, r3
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	2b00      	cmp	r3, #0
 8000964:	f000 80c1 	beq.w	8000aea <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000968:	4b53      	ldr	r3, [pc, #332]	; (8000ab8 <HAL_GPIO_Init+0x2d0>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	4a52      	ldr	r2, [pc, #328]	; (8000ab8 <HAL_GPIO_Init+0x2d0>)
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	6193      	str	r3, [r2, #24]
 8000974:	4b50      	ldr	r3, [pc, #320]	; (8000ab8 <HAL_GPIO_Init+0x2d0>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f003 0301 	and.w	r3, r3, #1
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000980:	4a4e      	ldr	r2, [pc, #312]	; (8000abc <HAL_GPIO_Init+0x2d4>)
 8000982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000984:	089b      	lsrs	r3, r3, #2
 8000986:	3302      	adds	r3, #2
 8000988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800098c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800098e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000990:	f003 0303 	and.w	r3, r3, #3
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	220f      	movs	r2, #15
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	43db      	mvns	r3, r3
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	4013      	ands	r3, r2
 80009a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a46      	ldr	r2, [pc, #280]	; (8000ac0 <HAL_GPIO_Init+0x2d8>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d01f      	beq.n	80009ec <HAL_GPIO_Init+0x204>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a45      	ldr	r2, [pc, #276]	; (8000ac4 <HAL_GPIO_Init+0x2dc>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d019      	beq.n	80009e8 <HAL_GPIO_Init+0x200>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a44      	ldr	r2, [pc, #272]	; (8000ac8 <HAL_GPIO_Init+0x2e0>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d013      	beq.n	80009e4 <HAL_GPIO_Init+0x1fc>
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a43      	ldr	r2, [pc, #268]	; (8000acc <HAL_GPIO_Init+0x2e4>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d00d      	beq.n	80009e0 <HAL_GPIO_Init+0x1f8>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a42      	ldr	r2, [pc, #264]	; (8000ad0 <HAL_GPIO_Init+0x2e8>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d007      	beq.n	80009dc <HAL_GPIO_Init+0x1f4>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a41      	ldr	r2, [pc, #260]	; (8000ad4 <HAL_GPIO_Init+0x2ec>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d101      	bne.n	80009d8 <HAL_GPIO_Init+0x1f0>
 80009d4:	2305      	movs	r3, #5
 80009d6:	e00a      	b.n	80009ee <HAL_GPIO_Init+0x206>
 80009d8:	2306      	movs	r3, #6
 80009da:	e008      	b.n	80009ee <HAL_GPIO_Init+0x206>
 80009dc:	2304      	movs	r3, #4
 80009de:	e006      	b.n	80009ee <HAL_GPIO_Init+0x206>
 80009e0:	2303      	movs	r3, #3
 80009e2:	e004      	b.n	80009ee <HAL_GPIO_Init+0x206>
 80009e4:	2302      	movs	r3, #2
 80009e6:	e002      	b.n	80009ee <HAL_GPIO_Init+0x206>
 80009e8:	2301      	movs	r3, #1
 80009ea:	e000      	b.n	80009ee <HAL_GPIO_Init+0x206>
 80009ec:	2300      	movs	r3, #0
 80009ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009f0:	f002 0203 	and.w	r2, r2, #3
 80009f4:	0092      	lsls	r2, r2, #2
 80009f6:	4093      	lsls	r3, r2
 80009f8:	68fa      	ldr	r2, [r7, #12]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009fe:	492f      	ldr	r1, [pc, #188]	; (8000abc <HAL_GPIO_Init+0x2d4>)
 8000a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a02:	089b      	lsrs	r3, r3, #2
 8000a04:	3302      	adds	r3, #2
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d006      	beq.n	8000a26 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a18:	4b2f      	ldr	r3, [pc, #188]	; (8000ad8 <HAL_GPIO_Init+0x2f0>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	492e      	ldr	r1, [pc, #184]	; (8000ad8 <HAL_GPIO_Init+0x2f0>)
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	600b      	str	r3, [r1, #0]
 8000a24:	e006      	b.n	8000a34 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a26:	4b2c      	ldr	r3, [pc, #176]	; (8000ad8 <HAL_GPIO_Init+0x2f0>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	492a      	ldr	r1, [pc, #168]	; (8000ad8 <HAL_GPIO_Init+0x2f0>)
 8000a30:	4013      	ands	r3, r2
 8000a32:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d006      	beq.n	8000a4e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a40:	4b25      	ldr	r3, [pc, #148]	; (8000ad8 <HAL_GPIO_Init+0x2f0>)
 8000a42:	685a      	ldr	r2, [r3, #4]
 8000a44:	4924      	ldr	r1, [pc, #144]	; (8000ad8 <HAL_GPIO_Init+0x2f0>)
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	604b      	str	r3, [r1, #4]
 8000a4c:	e006      	b.n	8000a5c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a4e:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <HAL_GPIO_Init+0x2f0>)
 8000a50:	685a      	ldr	r2, [r3, #4]
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	43db      	mvns	r3, r3
 8000a56:	4920      	ldr	r1, [pc, #128]	; (8000ad8 <HAL_GPIO_Init+0x2f0>)
 8000a58:	4013      	ands	r3, r2
 8000a5a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d006      	beq.n	8000a76 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <HAL_GPIO_Init+0x2f0>)
 8000a6a:	689a      	ldr	r2, [r3, #8]
 8000a6c:	491a      	ldr	r1, [pc, #104]	; (8000ad8 <HAL_GPIO_Init+0x2f0>)
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	608b      	str	r3, [r1, #8]
 8000a74:	e006      	b.n	8000a84 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <HAL_GPIO_Init+0x2f0>)
 8000a78:	689a      	ldr	r2, [r3, #8]
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	4916      	ldr	r1, [pc, #88]	; (8000ad8 <HAL_GPIO_Init+0x2f0>)
 8000a80:	4013      	ands	r3, r2
 8000a82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d025      	beq.n	8000adc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <HAL_GPIO_Init+0x2f0>)
 8000a92:	68da      	ldr	r2, [r3, #12]
 8000a94:	4910      	ldr	r1, [pc, #64]	; (8000ad8 <HAL_GPIO_Init+0x2f0>)
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	60cb      	str	r3, [r1, #12]
 8000a9c:	e025      	b.n	8000aea <HAL_GPIO_Init+0x302>
 8000a9e:	bf00      	nop
 8000aa0:	10320000 	.word	0x10320000
 8000aa4:	10310000 	.word	0x10310000
 8000aa8:	10220000 	.word	0x10220000
 8000aac:	10210000 	.word	0x10210000
 8000ab0:	10120000 	.word	0x10120000
 8000ab4:	10110000 	.word	0x10110000
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40010000 	.word	0x40010000
 8000ac0:	40010800 	.word	0x40010800
 8000ac4:	40010c00 	.word	0x40010c00
 8000ac8:	40011000 	.word	0x40011000
 8000acc:	40011400 	.word	0x40011400
 8000ad0:	40011800 	.word	0x40011800
 8000ad4:	40011c00 	.word	0x40011c00
 8000ad8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000adc:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <HAL_GPIO_Init+0x324>)
 8000ade:	68da      	ldr	r2, [r3, #12]
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	4909      	ldr	r1, [pc, #36]	; (8000b0c <HAL_GPIO_Init+0x324>)
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aec:	3301      	adds	r3, #1
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af6:	fa22 f303 	lsr.w	r3, r2, r3
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f47f ae7e 	bne.w	80007fc <HAL_GPIO_Init+0x14>
  }
}
 8000b00:	bf00      	nop
 8000b02:	bf00      	nop
 8000b04:	372c      	adds	r7, #44	; 0x2c
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	40010400 	.word	0x40010400

08000b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	807b      	strh	r3, [r7, #2]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b20:	787b      	ldrb	r3, [r7, #1]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d003      	beq.n	8000b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b26:	887a      	ldrh	r2, [r7, #2]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b2c:	e003      	b.n	8000b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b2e:	887b      	ldrh	r3, [r7, #2]
 8000b30:	041a      	lsls	r2, r3, #16
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	611a      	str	r2, [r3, #16]
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d101      	bne.n	8000b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e26c      	b.n	800102c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f000 8087 	beq.w	8000c6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b60:	4b92      	ldr	r3, [pc, #584]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f003 030c 	and.w	r3, r3, #12
 8000b68:	2b04      	cmp	r3, #4
 8000b6a:	d00c      	beq.n	8000b86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b6c:	4b8f      	ldr	r3, [pc, #572]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f003 030c 	and.w	r3, r3, #12
 8000b74:	2b08      	cmp	r3, #8
 8000b76:	d112      	bne.n	8000b9e <HAL_RCC_OscConfig+0x5e>
 8000b78:	4b8c      	ldr	r3, [pc, #560]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b84:	d10b      	bne.n	8000b9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b86:	4b89      	ldr	r3, [pc, #548]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d06c      	beq.n	8000c6c <HAL_RCC_OscConfig+0x12c>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d168      	bne.n	8000c6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e246      	b.n	800102c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ba6:	d106      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x76>
 8000ba8:	4b80      	ldr	r3, [pc, #512]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a7f      	ldr	r2, [pc, #508]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb2:	6013      	str	r3, [r2, #0]
 8000bb4:	e02e      	b.n	8000c14 <HAL_RCC_OscConfig+0xd4>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d10c      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x98>
 8000bbe:	4b7b      	ldr	r3, [pc, #492]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a7a      	ldr	r2, [pc, #488]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bc8:	6013      	str	r3, [r2, #0]
 8000bca:	4b78      	ldr	r3, [pc, #480]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a77      	ldr	r2, [pc, #476]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000bd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	e01d      	b.n	8000c14 <HAL_RCC_OscConfig+0xd4>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000be0:	d10c      	bne.n	8000bfc <HAL_RCC_OscConfig+0xbc>
 8000be2:	4b72      	ldr	r3, [pc, #456]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a71      	ldr	r2, [pc, #452]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bec:	6013      	str	r3, [r2, #0]
 8000bee:	4b6f      	ldr	r3, [pc, #444]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a6e      	ldr	r2, [pc, #440]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf8:	6013      	str	r3, [r2, #0]
 8000bfa:	e00b      	b.n	8000c14 <HAL_RCC_OscConfig+0xd4>
 8000bfc:	4b6b      	ldr	r3, [pc, #428]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a6a      	ldr	r2, [pc, #424]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	4b68      	ldr	r3, [pc, #416]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a67      	ldr	r2, [pc, #412]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d013      	beq.n	8000c44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c1c:	f7ff fcf6 	bl	800060c <HAL_GetTick>
 8000c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c22:	e008      	b.n	8000c36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c24:	f7ff fcf2 	bl	800060c <HAL_GetTick>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	2b64      	cmp	r3, #100	; 0x64
 8000c30:	d901      	bls.n	8000c36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c32:	2303      	movs	r3, #3
 8000c34:	e1fa      	b.n	800102c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c36:	4b5d      	ldr	r3, [pc, #372]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d0f0      	beq.n	8000c24 <HAL_RCC_OscConfig+0xe4>
 8000c42:	e014      	b.n	8000c6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c44:	f7ff fce2 	bl	800060c <HAL_GetTick>
 8000c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c4a:	e008      	b.n	8000c5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c4c:	f7ff fcde 	bl	800060c <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	2b64      	cmp	r3, #100	; 0x64
 8000c58:	d901      	bls.n	8000c5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e1e6      	b.n	800102c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c5e:	4b53      	ldr	r3, [pc, #332]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1f0      	bne.n	8000c4c <HAL_RCC_OscConfig+0x10c>
 8000c6a:	e000      	b.n	8000c6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d063      	beq.n	8000d42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c7a:	4b4c      	ldr	r3, [pc, #304]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f003 030c 	and.w	r3, r3, #12
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d00b      	beq.n	8000c9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c86:	4b49      	ldr	r3, [pc, #292]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f003 030c 	and.w	r3, r3, #12
 8000c8e:	2b08      	cmp	r3, #8
 8000c90:	d11c      	bne.n	8000ccc <HAL_RCC_OscConfig+0x18c>
 8000c92:	4b46      	ldr	r3, [pc, #280]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d116      	bne.n	8000ccc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c9e:	4b43      	ldr	r3, [pc, #268]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d005      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x176>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	691b      	ldr	r3, [r3, #16]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d001      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e1ba      	b.n	800102c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cb6:	4b3d      	ldr	r3, [pc, #244]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	4939      	ldr	r1, [pc, #228]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cca:	e03a      	b.n	8000d42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	691b      	ldr	r3, [r3, #16]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d020      	beq.n	8000d16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cd4:	4b36      	ldr	r3, [pc, #216]	; (8000db0 <HAL_RCC_OscConfig+0x270>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cda:	f7ff fc97 	bl	800060c <HAL_GetTick>
 8000cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce0:	e008      	b.n	8000cf4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ce2:	f7ff fc93 	bl	800060c <HAL_GetTick>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d901      	bls.n	8000cf4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	e19b      	b.n	800102c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf4:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d0f0      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d00:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	695b      	ldr	r3, [r3, #20]
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	4927      	ldr	r1, [pc, #156]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000d10:	4313      	orrs	r3, r2
 8000d12:	600b      	str	r3, [r1, #0]
 8000d14:	e015      	b.n	8000d42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d16:	4b26      	ldr	r3, [pc, #152]	; (8000db0 <HAL_RCC_OscConfig+0x270>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d1c:	f7ff fc76 	bl	800060c <HAL_GetTick>
 8000d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d22:	e008      	b.n	8000d36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d24:	f7ff fc72 	bl	800060c <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d901      	bls.n	8000d36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d32:	2303      	movs	r3, #3
 8000d34:	e17a      	b.n	800102c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d36:	4b1d      	ldr	r3, [pc, #116]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d1f0      	bne.n	8000d24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0308 	and.w	r3, r3, #8
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d03a      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d019      	beq.n	8000d8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d56:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <HAL_RCC_OscConfig+0x274>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d5c:	f7ff fc56 	bl	800060c <HAL_GetTick>
 8000d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d62:	e008      	b.n	8000d76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d64:	f7ff fc52 	bl	800060c <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d901      	bls.n	8000d76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d72:	2303      	movs	r3, #3
 8000d74:	e15a      	b.n	800102c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d76:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <HAL_RCC_OscConfig+0x26c>)
 8000d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0f0      	beq.n	8000d64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d82:	2001      	movs	r0, #1
 8000d84:	f000 faa6 	bl	80012d4 <RCC_Delay>
 8000d88:	e01c      	b.n	8000dc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <HAL_RCC_OscConfig+0x274>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d90:	f7ff fc3c 	bl	800060c <HAL_GetTick>
 8000d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d96:	e00f      	b.n	8000db8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d98:	f7ff fc38 	bl	800060c <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d908      	bls.n	8000db8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e140      	b.n	800102c <HAL_RCC_OscConfig+0x4ec>
 8000daa:	bf00      	nop
 8000dac:	40021000 	.word	0x40021000
 8000db0:	42420000 	.word	0x42420000
 8000db4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db8:	4b9e      	ldr	r3, [pc, #632]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dbc:	f003 0302 	and.w	r3, r3, #2
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d1e9      	bne.n	8000d98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f003 0304 	and.w	r3, r3, #4
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	f000 80a6 	beq.w	8000f1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dd6:	4b97      	ldr	r3, [pc, #604]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d10d      	bne.n	8000dfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000de2:	4b94      	ldr	r3, [pc, #592]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	4a93      	ldr	r2, [pc, #588]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dec:	61d3      	str	r3, [r2, #28]
 8000dee:	4b91      	ldr	r3, [pc, #580]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dfe:	4b8e      	ldr	r3, [pc, #568]	; (8001038 <HAL_RCC_OscConfig+0x4f8>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d118      	bne.n	8000e3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e0a:	4b8b      	ldr	r3, [pc, #556]	; (8001038 <HAL_RCC_OscConfig+0x4f8>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a8a      	ldr	r2, [pc, #552]	; (8001038 <HAL_RCC_OscConfig+0x4f8>)
 8000e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e16:	f7ff fbf9 	bl	800060c <HAL_GetTick>
 8000e1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e1c:	e008      	b.n	8000e30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e1e:	f7ff fbf5 	bl	800060c <HAL_GetTick>
 8000e22:	4602      	mov	r2, r0
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	2b64      	cmp	r3, #100	; 0x64
 8000e2a:	d901      	bls.n	8000e30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	e0fd      	b.n	800102c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e30:	4b81      	ldr	r3, [pc, #516]	; (8001038 <HAL_RCC_OscConfig+0x4f8>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d0f0      	beq.n	8000e1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d106      	bne.n	8000e52 <HAL_RCC_OscConfig+0x312>
 8000e44:	4b7b      	ldr	r3, [pc, #492]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000e46:	6a1b      	ldr	r3, [r3, #32]
 8000e48:	4a7a      	ldr	r2, [pc, #488]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	6213      	str	r3, [r2, #32]
 8000e50:	e02d      	b.n	8000eae <HAL_RCC_OscConfig+0x36e>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d10c      	bne.n	8000e74 <HAL_RCC_OscConfig+0x334>
 8000e5a:	4b76      	ldr	r3, [pc, #472]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000e5c:	6a1b      	ldr	r3, [r3, #32]
 8000e5e:	4a75      	ldr	r2, [pc, #468]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000e60:	f023 0301 	bic.w	r3, r3, #1
 8000e64:	6213      	str	r3, [r2, #32]
 8000e66:	4b73      	ldr	r3, [pc, #460]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000e68:	6a1b      	ldr	r3, [r3, #32]
 8000e6a:	4a72      	ldr	r2, [pc, #456]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000e6c:	f023 0304 	bic.w	r3, r3, #4
 8000e70:	6213      	str	r3, [r2, #32]
 8000e72:	e01c      	b.n	8000eae <HAL_RCC_OscConfig+0x36e>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	2b05      	cmp	r3, #5
 8000e7a:	d10c      	bne.n	8000e96 <HAL_RCC_OscConfig+0x356>
 8000e7c:	4b6d      	ldr	r3, [pc, #436]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000e7e:	6a1b      	ldr	r3, [r3, #32]
 8000e80:	4a6c      	ldr	r2, [pc, #432]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000e82:	f043 0304 	orr.w	r3, r3, #4
 8000e86:	6213      	str	r3, [r2, #32]
 8000e88:	4b6a      	ldr	r3, [pc, #424]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000e8a:	6a1b      	ldr	r3, [r3, #32]
 8000e8c:	4a69      	ldr	r2, [pc, #420]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	6213      	str	r3, [r2, #32]
 8000e94:	e00b      	b.n	8000eae <HAL_RCC_OscConfig+0x36e>
 8000e96:	4b67      	ldr	r3, [pc, #412]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000e98:	6a1b      	ldr	r3, [r3, #32]
 8000e9a:	4a66      	ldr	r2, [pc, #408]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000e9c:	f023 0301 	bic.w	r3, r3, #1
 8000ea0:	6213      	str	r3, [r2, #32]
 8000ea2:	4b64      	ldr	r3, [pc, #400]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000ea4:	6a1b      	ldr	r3, [r3, #32]
 8000ea6:	4a63      	ldr	r2, [pc, #396]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000ea8:	f023 0304 	bic.w	r3, r3, #4
 8000eac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d015      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb6:	f7ff fba9 	bl	800060c <HAL_GetTick>
 8000eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ebc:	e00a      	b.n	8000ed4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ebe:	f7ff fba5 	bl	800060c <HAL_GetTick>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d901      	bls.n	8000ed4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e0ab      	b.n	800102c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed4:	4b57      	ldr	r3, [pc, #348]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d0ee      	beq.n	8000ebe <HAL_RCC_OscConfig+0x37e>
 8000ee0:	e014      	b.n	8000f0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee2:	f7ff fb93 	bl	800060c <HAL_GetTick>
 8000ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ee8:	e00a      	b.n	8000f00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eea:	f7ff fb8f 	bl	800060c <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d901      	bls.n	8000f00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	e095      	b.n	800102c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f00:	4b4c      	ldr	r3, [pc, #304]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	f003 0302 	and.w	r3, r3, #2
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d1ee      	bne.n	8000eea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f0c:	7dfb      	ldrb	r3, [r7, #23]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d105      	bne.n	8000f1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f12:	4b48      	ldr	r3, [pc, #288]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	4a47      	ldr	r2, [pc, #284]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	f000 8081 	beq.w	800102a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f28:	4b42      	ldr	r3, [pc, #264]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 030c 	and.w	r3, r3, #12
 8000f30:	2b08      	cmp	r3, #8
 8000f32:	d061      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	69db      	ldr	r3, [r3, #28]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d146      	bne.n	8000fca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f3c:	4b3f      	ldr	r3, [pc, #252]	; (800103c <HAL_RCC_OscConfig+0x4fc>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f42:	f7ff fb63 	bl	800060c <HAL_GetTick>
 8000f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f48:	e008      	b.n	8000f5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f4a:	f7ff fb5f 	bl	800060c <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d901      	bls.n	8000f5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e067      	b.n	800102c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f5c:	4b35      	ldr	r3, [pc, #212]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1f0      	bne.n	8000f4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a1b      	ldr	r3, [r3, #32]
 8000f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f70:	d108      	bne.n	8000f84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f72:	4b30      	ldr	r3, [pc, #192]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	492d      	ldr	r1, [pc, #180]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000f80:	4313      	orrs	r3, r2
 8000f82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f84:	4b2b      	ldr	r3, [pc, #172]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a19      	ldr	r1, [r3, #32]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f94:	430b      	orrs	r3, r1
 8000f96:	4927      	ldr	r1, [pc, #156]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f9c:	4b27      	ldr	r3, [pc, #156]	; (800103c <HAL_RCC_OscConfig+0x4fc>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa2:	f7ff fb33 	bl	800060c <HAL_GetTick>
 8000fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fa8:	e008      	b.n	8000fbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000faa:	f7ff fb2f 	bl	800060c <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d901      	bls.n	8000fbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e037      	b.n	800102c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d0f0      	beq.n	8000faa <HAL_RCC_OscConfig+0x46a>
 8000fc8:	e02f      	b.n	800102a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <HAL_RCC_OscConfig+0x4fc>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fb1c 	bl	800060c <HAL_GetTick>
 8000fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fd6:	e008      	b.n	8000fea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fd8:	f7ff fb18 	bl	800060c <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d901      	bls.n	8000fea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e020      	b.n	800102c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fea:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1f0      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x498>
 8000ff6:	e018      	b.n	800102a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69db      	ldr	r3, [r3, #28]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d101      	bne.n	8001004 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e013      	b.n	800102c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <HAL_RCC_OscConfig+0x4f4>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	429a      	cmp	r2, r3
 8001016:	d106      	bne.n	8001026 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001022:	429a      	cmp	r2, r3
 8001024:	d001      	beq.n	800102a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e000      	b.n	800102c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40021000 	.word	0x40021000
 8001038:	40007000 	.word	0x40007000
 800103c:	42420060 	.word	0x42420060

08001040 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e0d0      	b.n	80011f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001054:	4b6a      	ldr	r3, [pc, #424]	; (8001200 <HAL_RCC_ClockConfig+0x1c0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	429a      	cmp	r2, r3
 8001060:	d910      	bls.n	8001084 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001062:	4b67      	ldr	r3, [pc, #412]	; (8001200 <HAL_RCC_ClockConfig+0x1c0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f023 0207 	bic.w	r2, r3, #7
 800106a:	4965      	ldr	r1, [pc, #404]	; (8001200 <HAL_RCC_ClockConfig+0x1c0>)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	4313      	orrs	r3, r2
 8001070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001072:	4b63      	ldr	r3, [pc, #396]	; (8001200 <HAL_RCC_ClockConfig+0x1c0>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	429a      	cmp	r2, r3
 800107e:	d001      	beq.n	8001084 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e0b8      	b.n	80011f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d020      	beq.n	80010d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	2b00      	cmp	r3, #0
 800109a:	d005      	beq.n	80010a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800109c:	4b59      	ldr	r3, [pc, #356]	; (8001204 <HAL_RCC_ClockConfig+0x1c4>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	4a58      	ldr	r2, [pc, #352]	; (8001204 <HAL_RCC_ClockConfig+0x1c4>)
 80010a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0308 	and.w	r3, r3, #8
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d005      	beq.n	80010c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010b4:	4b53      	ldr	r3, [pc, #332]	; (8001204 <HAL_RCC_ClockConfig+0x1c4>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	4a52      	ldr	r2, [pc, #328]	; (8001204 <HAL_RCC_ClockConfig+0x1c4>)
 80010ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80010be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010c0:	4b50      	ldr	r3, [pc, #320]	; (8001204 <HAL_RCC_ClockConfig+0x1c4>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	494d      	ldr	r1, [pc, #308]	; (8001204 <HAL_RCC_ClockConfig+0x1c4>)
 80010ce:	4313      	orrs	r3, r2
 80010d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d040      	beq.n	8001160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d107      	bne.n	80010f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e6:	4b47      	ldr	r3, [pc, #284]	; (8001204 <HAL_RCC_ClockConfig+0x1c4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d115      	bne.n	800111e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e07f      	b.n	80011f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d107      	bne.n	800110e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010fe:	4b41      	ldr	r3, [pc, #260]	; (8001204 <HAL_RCC_ClockConfig+0x1c4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d109      	bne.n	800111e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e073      	b.n	80011f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110e:	4b3d      	ldr	r3, [pc, #244]	; (8001204 <HAL_RCC_ClockConfig+0x1c4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e06b      	b.n	80011f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800111e:	4b39      	ldr	r3, [pc, #228]	; (8001204 <HAL_RCC_ClockConfig+0x1c4>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f023 0203 	bic.w	r2, r3, #3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	4936      	ldr	r1, [pc, #216]	; (8001204 <HAL_RCC_ClockConfig+0x1c4>)
 800112c:	4313      	orrs	r3, r2
 800112e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001130:	f7ff fa6c 	bl	800060c <HAL_GetTick>
 8001134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001136:	e00a      	b.n	800114e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001138:	f7ff fa68 	bl	800060c <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	f241 3288 	movw	r2, #5000	; 0x1388
 8001146:	4293      	cmp	r3, r2
 8001148:	d901      	bls.n	800114e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e053      	b.n	80011f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800114e:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <HAL_RCC_ClockConfig+0x1c4>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 020c 	and.w	r2, r3, #12
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	429a      	cmp	r2, r3
 800115e:	d1eb      	bne.n	8001138 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001160:	4b27      	ldr	r3, [pc, #156]	; (8001200 <HAL_RCC_ClockConfig+0x1c0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0307 	and.w	r3, r3, #7
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	429a      	cmp	r2, r3
 800116c:	d210      	bcs.n	8001190 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800116e:	4b24      	ldr	r3, [pc, #144]	; (8001200 <HAL_RCC_ClockConfig+0x1c0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f023 0207 	bic.w	r2, r3, #7
 8001176:	4922      	ldr	r1, [pc, #136]	; (8001200 <HAL_RCC_ClockConfig+0x1c0>)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	4313      	orrs	r3, r2
 800117c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800117e:	4b20      	ldr	r3, [pc, #128]	; (8001200 <HAL_RCC_ClockConfig+0x1c0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	429a      	cmp	r2, r3
 800118a:	d001      	beq.n	8001190 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e032      	b.n	80011f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	2b00      	cmp	r3, #0
 800119a:	d008      	beq.n	80011ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_RCC_ClockConfig+0x1c4>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	4916      	ldr	r1, [pc, #88]	; (8001204 <HAL_RCC_ClockConfig+0x1c4>)
 80011aa:	4313      	orrs	r3, r2
 80011ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0308 	and.w	r3, r3, #8
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d009      	beq.n	80011ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_RCC_ClockConfig+0x1c4>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	490e      	ldr	r1, [pc, #56]	; (8001204 <HAL_RCC_ClockConfig+0x1c4>)
 80011ca:	4313      	orrs	r3, r2
 80011cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011ce:	f000 f821 	bl	8001214 <HAL_RCC_GetSysClockFreq>
 80011d2:	4602      	mov	r2, r0
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_RCC_ClockConfig+0x1c4>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	091b      	lsrs	r3, r3, #4
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	490a      	ldr	r1, [pc, #40]	; (8001208 <HAL_RCC_ClockConfig+0x1c8>)
 80011e0:	5ccb      	ldrb	r3, [r1, r3]
 80011e2:	fa22 f303 	lsr.w	r3, r2, r3
 80011e6:	4a09      	ldr	r2, [pc, #36]	; (800120c <HAL_RCC_ClockConfig+0x1cc>)
 80011e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <HAL_RCC_ClockConfig+0x1d0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f9ca 	bl	8000588 <HAL_InitTick>

  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40022000 	.word	0x40022000
 8001204:	40021000 	.word	0x40021000
 8001208:	08002468 	.word	0x08002468
 800120c:	20000000 	.word	0x20000000
 8001210:	20000004 	.word	0x20000004

08001214 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001214:	b490      	push	{r4, r7}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800121a:	4b2a      	ldr	r3, [pc, #168]	; (80012c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800121c:	1d3c      	adds	r4, r7, #4
 800121e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001220:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001224:	f240 2301 	movw	r3, #513	; 0x201
 8001228:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
 800122e:	2300      	movs	r3, #0
 8001230:	61bb      	str	r3, [r7, #24]
 8001232:	2300      	movs	r3, #0
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800123a:	2300      	movs	r3, #0
 800123c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800123e:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f003 030c 	and.w	r3, r3, #12
 800124a:	2b04      	cmp	r3, #4
 800124c:	d002      	beq.n	8001254 <HAL_RCC_GetSysClockFreq+0x40>
 800124e:	2b08      	cmp	r3, #8
 8001250:	d003      	beq.n	800125a <HAL_RCC_GetSysClockFreq+0x46>
 8001252:	e02d      	b.n	80012b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001256:	623b      	str	r3, [r7, #32]
      break;
 8001258:	e02d      	b.n	80012b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	0c9b      	lsrs	r3, r3, #18
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001266:	4413      	add	r3, r2
 8001268:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800126c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d013      	beq.n	80012a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	0c5b      	lsrs	r3, r3, #17
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001286:	4413      	add	r3, r2
 8001288:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800128c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001292:	fb02 f203 	mul.w	r2, r2, r3
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	fbb2 f3f3 	udiv	r3, r2, r3
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
 800129e:	e004      	b.n	80012aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80012a4:	fb02 f303 	mul.w	r3, r2, r3
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	623b      	str	r3, [r7, #32]
      break;
 80012ae:	e002      	b.n	80012b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80012b2:	623b      	str	r3, [r7, #32]
      break;
 80012b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012b6:	6a3b      	ldr	r3, [r7, #32]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3728      	adds	r7, #40	; 0x28
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc90      	pop	{r4, r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	08002458 	.word	0x08002458
 80012c8:	40021000 	.word	0x40021000
 80012cc:	007a1200 	.word	0x007a1200
 80012d0:	003d0900 	.word	0x003d0900

080012d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <RCC_Delay+0x34>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0a      	ldr	r2, [pc, #40]	; (800130c <RCC_Delay+0x38>)
 80012e2:	fba2 2303 	umull	r2, r3, r2, r3
 80012e6:	0a5b      	lsrs	r3, r3, #9
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	fb02 f303 	mul.w	r3, r2, r3
 80012ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80012f0:	bf00      	nop
  }
  while (Delay --);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	1e5a      	subs	r2, r3, #1
 80012f6:	60fa      	str	r2, [r7, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1f9      	bne.n	80012f0 <RCC_Delay+0x1c>
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	20000000 	.word	0x20000000
 800130c:	10624dd3 	.word	0x10624dd3

08001310 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e076      	b.n	8001410 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001326:	2b00      	cmp	r3, #0
 8001328:	d108      	bne.n	800133c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001332:	d009      	beq.n	8001348 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
 800133a:	e005      	b.n	8001348 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d106      	bne.n	8001368 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff f85c 	bl	8000420 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2202      	movs	r2, #2
 800136c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800137e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	431a      	orrs	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	431a      	orrs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013b8:	431a      	orrs	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013c2:	431a      	orrs	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013cc:	ea42 0103 	orr.w	r1, r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	0c1a      	lsrs	r2, r3, #16
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f002 0204 	and.w	r2, r2, #4
 80013ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	69da      	ldr	r2, [r3, #28]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08c      	sub	sp, #48	; 0x30
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
 8001424:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001426:	2301      	movs	r3, #1
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001436:	2b01      	cmp	r3, #1
 8001438:	d101      	bne.n	800143e <HAL_SPI_TransmitReceive+0x26>
 800143a:	2302      	movs	r3, #2
 800143c:	e18a      	b.n	8001754 <HAL_SPI_TransmitReceive+0x33c>
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2201      	movs	r2, #1
 8001442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001446:	f7ff f8e1 	bl	800060c <HAL_GetTick>
 800144a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800145c:	887b      	ldrh	r3, [r7, #2]
 800145e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001460:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001464:	2b01      	cmp	r3, #1
 8001466:	d00f      	beq.n	8001488 <HAL_SPI_TransmitReceive+0x70>
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800146e:	d107      	bne.n	8001480 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d103      	bne.n	8001480 <HAL_SPI_TransmitReceive+0x68>
 8001478:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800147c:	2b04      	cmp	r3, #4
 800147e:	d003      	beq.n	8001488 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001480:	2302      	movs	r3, #2
 8001482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001486:	e15b      	b.n	8001740 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <HAL_SPI_TransmitReceive+0x82>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <HAL_SPI_TransmitReceive+0x82>
 8001494:	887b      	ldrh	r3, [r7, #2]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d103      	bne.n	80014a2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80014a0:	e14e      	b.n	8001740 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	d003      	beq.n	80014b6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2205      	movs	r2, #5
 80014b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	887a      	ldrh	r2, [r7, #2]
 80014c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	887a      	ldrh	r2, [r7, #2]
 80014cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	887a      	ldrh	r2, [r7, #2]
 80014d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	887a      	ldrh	r2, [r7, #2]
 80014de:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2200      	movs	r2, #0
 80014e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2200      	movs	r2, #0
 80014ea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014f6:	2b40      	cmp	r3, #64	; 0x40
 80014f8:	d007      	beq.n	800150a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001508:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001512:	d178      	bne.n	8001606 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d002      	beq.n	8001522 <HAL_SPI_TransmitReceive+0x10a>
 800151c:	8b7b      	ldrh	r3, [r7, #26]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d166      	bne.n	80015f0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	881a      	ldrh	r2, [r3, #0]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	1c9a      	adds	r2, r3, #2
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800153c:	b29b      	uxth	r3, r3
 800153e:	3b01      	subs	r3, #1
 8001540:	b29a      	uxth	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001546:	e053      	b.n	80015f0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b02      	cmp	r3, #2
 8001554:	d11b      	bne.n	800158e <HAL_SPI_TransmitReceive+0x176>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800155a:	b29b      	uxth	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d016      	beq.n	800158e <HAL_SPI_TransmitReceive+0x176>
 8001560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001562:	2b01      	cmp	r3, #1
 8001564:	d113      	bne.n	800158e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	881a      	ldrh	r2, [r3, #0]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	1c9a      	adds	r2, r3, #2
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001580:	b29b      	uxth	r3, r3
 8001582:	3b01      	subs	r3, #1
 8001584:	b29a      	uxth	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800158a:	2300      	movs	r3, #0
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b01      	cmp	r3, #1
 800159a:	d119      	bne.n	80015d0 <HAL_SPI_TransmitReceive+0x1b8>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d014      	beq.n	80015d0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b0:	b292      	uxth	r2, r2
 80015b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b8:	1c9a      	adds	r2, r3, #2
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	3b01      	subs	r3, #1
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80015cc:	2301      	movs	r3, #1
 80015ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80015d0:	f7ff f81c 	bl	800060c <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015dc:	429a      	cmp	r2, r3
 80015de:	d807      	bhi.n	80015f0 <HAL_SPI_TransmitReceive+0x1d8>
 80015e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e6:	d003      	beq.n	80015f0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80015ee:	e0a7      	b.n	8001740 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1a6      	bne.n	8001548 <HAL_SPI_TransmitReceive+0x130>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80015fe:	b29b      	uxth	r3, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1a1      	bne.n	8001548 <HAL_SPI_TransmitReceive+0x130>
 8001604:	e07c      	b.n	8001700 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d002      	beq.n	8001614 <HAL_SPI_TransmitReceive+0x1fc>
 800160e:	8b7b      	ldrh	r3, [r7, #26]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d16b      	bne.n	80016ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	330c      	adds	r3, #12
 800161e:	7812      	ldrb	r2, [r2, #0]
 8001620:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	1c5a      	adds	r2, r3, #1
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001630:	b29b      	uxth	r3, r3
 8001632:	3b01      	subs	r3, #1
 8001634:	b29a      	uxth	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800163a:	e057      	b.n	80016ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b02      	cmp	r3, #2
 8001648:	d11c      	bne.n	8001684 <HAL_SPI_TransmitReceive+0x26c>
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800164e:	b29b      	uxth	r3, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	d017      	beq.n	8001684 <HAL_SPI_TransmitReceive+0x26c>
 8001654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001656:	2b01      	cmp	r3, #1
 8001658:	d114      	bne.n	8001684 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	330c      	adds	r3, #12
 8001664:	7812      	ldrb	r2, [r2, #0]
 8001666:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	1c5a      	adds	r2, r3, #1
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001676:	b29b      	uxth	r3, r3
 8001678:	3b01      	subs	r3, #1
 800167a:	b29a      	uxth	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001680:	2300      	movs	r3, #0
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b01      	cmp	r3, #1
 8001690:	d119      	bne.n	80016c6 <HAL_SPI_TransmitReceive+0x2ae>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001696:	b29b      	uxth	r3, r3
 8001698:	2b00      	cmp	r3, #0
 800169a:	d014      	beq.n	80016c6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	3b01      	subs	r3, #1
 80016bc:	b29a      	uxth	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80016c2:	2301      	movs	r3, #1
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80016c6:	f7fe ffa1 	bl	800060c <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d803      	bhi.n	80016de <HAL_SPI_TransmitReceive+0x2c6>
 80016d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016dc:	d102      	bne.n	80016e4 <HAL_SPI_TransmitReceive+0x2cc>
 80016de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d103      	bne.n	80016ec <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80016ea:	e029      	b.n	8001740 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1a2      	bne.n	800163c <HAL_SPI_TransmitReceive+0x224>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d19d      	bne.n	800163c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001702:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f000 f8b1 	bl	800186c <SPI_EndRxTxTransaction>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d006      	beq.n	800171e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2220      	movs	r2, #32
 800171a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800171c:	e010      	b.n	8001740 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d10b      	bne.n	800173e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	e000      	b.n	8001740 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800173e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001750:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001754:	4618      	mov	r0, r3
 8001756:	3730      	adds	r7, #48	; 0x30
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	4613      	mov	r3, r2
 800176a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800176c:	f7fe ff4e 	bl	800060c <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001774:	1a9b      	subs	r3, r3, r2
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	4413      	add	r3, r2
 800177a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800177c:	f7fe ff46 	bl	800060c <HAL_GetTick>
 8001780:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001782:	4b39      	ldr	r3, [pc, #228]	; (8001868 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	015b      	lsls	r3, r3, #5
 8001788:	0d1b      	lsrs	r3, r3, #20
 800178a:	69fa      	ldr	r2, [r7, #28]
 800178c:	fb02 f303 	mul.w	r3, r2, r3
 8001790:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001792:	e054      	b.n	800183e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179a:	d050      	beq.n	800183e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800179c:	f7fe ff36 	bl	800060c <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	69fa      	ldr	r2, [r7, #28]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d902      	bls.n	80017b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d13d      	bne.n	800182e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80017c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80017ca:	d111      	bne.n	80017f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017d4:	d004      	beq.n	80017e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017de:	d107      	bne.n	80017f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017f8:	d10f      	bne.n	800181a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001818:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e017      	b.n	800185e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	3b01      	subs	r3, #1
 800183c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	4013      	ands	r3, r2
 8001848:	68ba      	ldr	r2, [r7, #8]
 800184a:	429a      	cmp	r2, r3
 800184c:	bf0c      	ite	eq
 800184e:	2301      	moveq	r3, #1
 8001850:	2300      	movne	r3, #0
 8001852:	b2db      	uxtb	r3, r3
 8001854:	461a      	mov	r2, r3
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	429a      	cmp	r2, r3
 800185a:	d19b      	bne.n	8001794 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3720      	adds	r7, #32
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000000 	.word	0x20000000

0800186c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af02      	add	r7, sp, #8
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2200      	movs	r2, #0
 8001880:	2180      	movs	r1, #128	; 0x80
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f7ff ff6a 	bl	800175c <SPI_WaitFlagStateUntilTimeout>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d007      	beq.n	800189e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001892:	f043 0220 	orr.w	r2, r3, #32
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e000      	b.n	80018a0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80018ac:	4904      	ldr	r1, [pc, #16]	; (80018c0 <MX_FATFS_Init+0x18>)
 80018ae:	4805      	ldr	r0, [pc, #20]	; (80018c4 <MX_FATFS_Init+0x1c>)
 80018b0:	f000 fd8a 	bl	80023c8 <FATFS_LinkDriver>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <MX_FATFS_Init+0x20>)
 80018ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	2000057c 	.word	0x2000057c
 80018c4:	2000000c 	.word	0x2000000c
 80018c8:	20000580 	.word	0x20000580

080018cc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 f9d9 	bl	8001c90 <USER_SPI_initialize>
 80018de:	4603      	mov	r3, r0
   // Stat = STA_NOINIT;
   // return Stat;
  /* USER CODE END INIT */
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 fab7 	bl	8001e68 <USER_SPI_status>
 80018fa:	4603      	mov	r3, r0
   // Stat = STA_NOINIT;
    //return Stat;
  /* USER CODE END STATUS */
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	4603      	mov	r3, r0
 8001912:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8001914:	7bf8      	ldrb	r0, [r7, #15]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	68b9      	ldr	r1, [r7, #8]
 800191c:	f000 fab8 	bl	8001e90 <USER_SPI_read>
 8001920:	4603      	mov	r3, r0
    //return RES_OK;
  /* USER CODE END READ */
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
 8001934:	603b      	str	r3, [r7, #0]
 8001936:	4603      	mov	r3, r0
 8001938:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800193a:	7bf8      	ldrb	r0, [r7, #15]
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	f000 fb0b 	bl	8001f5c <USER_SPI_write>
 8001946:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	603a      	str	r2, [r7, #0]
 800195a:	71fb      	strb	r3, [r7, #7]
 800195c:	460b      	mov	r3, r1
 800195e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8001960:	79b9      	ldrb	r1, [r7, #6]
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f000 fb74 	bl	8002054 <USER_SPI_ioctl>
 800196c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8001980:	f7fe fe44 	bl	800060c <HAL_GetTick>
 8001984:	4603      	mov	r3, r0
 8001986:	4a04      	ldr	r2, [pc, #16]	; (8001998 <SPI_Timer_On+0x20>)
 8001988:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800198a:	4a04      	ldr	r2, [pc, #16]	; (800199c <SPI_Timer_On+0x24>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6013      	str	r3, [r2, #0]
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	200009e0 	.word	0x200009e0
 800199c:	200009e4 	.word	0x200009e4

080019a0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80019a4:	f7fe fe32 	bl	800060c <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <SPI_Timer_Status+0x24>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	1ad2      	subs	r2, r2, r3
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <SPI_Timer_Status+0x28>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	bf34      	ite	cc
 80019b8:	2301      	movcc	r3, #1
 80019ba:	2300      	movcs	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
}
 80019be:	4618      	mov	r0, r3
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200009e0 	.word	0x200009e0
 80019c8:	200009e4 	.word	0x200009e4

080019cc <xchg_spi>:

/* Exchange a byte */
static BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af02      	add	r7, sp, #8
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80019d6:	f107 020f 	add.w	r2, r7, #15
 80019da:	1df9      	adds	r1, r7, #7
 80019dc:	2332      	movs	r3, #50	; 0x32
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	2301      	movs	r3, #1
 80019e2:	4804      	ldr	r0, [pc, #16]	; (80019f4 <xchg_spi+0x28>)
 80019e4:	f7ff fd18 	bl	8001418 <HAL_SPI_TransmitReceive>
    return rxDat;
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200002e8 	.word	0x200002e8

080019f8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	e00a      	b.n	8001a1e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	18d4      	adds	r4, r2, r3
 8001a0e:	20ff      	movs	r0, #255	; 0xff
 8001a10:	f7ff ffdc 	bl	80019cc <xchg_spi>
 8001a14:	4603      	mov	r3, r0
 8001a16:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d3f0      	bcc.n	8001a08 <rcvr_spi_multi+0x10>
	}
}
 8001a26:	bf00      	nop
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd90      	pop	{r4, r7, pc}

08001a30 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	e009      	b.n	8001a54 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4413      	add	r3, r2
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ffbf 	bl	80019cc <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	3301      	adds	r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d3f1      	bcc.n	8001a40 <xmit_spi_multi+0x10>
	}
}
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b086      	sub	sp, #24
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8001a6e:	f7fe fdcd 	bl	800060c <HAL_GetTick>
 8001a72:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8001a78:	20ff      	movs	r0, #255	; 0xff
 8001a7a:	f7ff ffa7 	bl	80019cc <xchg_spi>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	2bff      	cmp	r3, #255	; 0xff
 8001a86:	d007      	beq.n	8001a98 <wait_ready+0x32>
 8001a88:	f7fe fdc0 	bl	800060c <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d8ef      	bhi.n	8001a78 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	2bff      	cmp	r3, #255	; 0xff
 8001a9c:	bf0c      	ite	eq
 8001a9e:	2301      	moveq	r3, #1
 8001aa0:	2300      	movne	r3, #0
 8001aa2:	b2db      	uxtb	r3, r3
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	2110      	movs	r1, #16
 8001ab4:	4803      	ldr	r0, [pc, #12]	; (8001ac4 <despiselect+0x18>)
 8001ab6:	f7ff f82b 	bl	8000b10 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8001aba:	20ff      	movs	r0, #255	; 0xff
 8001abc:	f7ff ff86 	bl	80019cc <xchg_spi>

}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40010800 	.word	0x40010800

08001ac8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8001acc:	2200      	movs	r2, #0
 8001ace:	2110      	movs	r1, #16
 8001ad0:	4809      	ldr	r0, [pc, #36]	; (8001af8 <spiselect+0x30>)
 8001ad2:	f7ff f81d 	bl	8000b10 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8001ad6:	20ff      	movs	r0, #255	; 0xff
 8001ad8:	f7ff ff78 	bl	80019cc <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8001adc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ae0:	f7ff ffc1 	bl	8001a66 <wait_ready>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <spiselect+0x26>
 8001aea:	2301      	movs	r3, #1
 8001aec:	e002      	b.n	8001af4 <spiselect+0x2c>

	despiselect();
 8001aee:	f7ff ffdd 	bl	8001aac <despiselect>
	return 0;	/* Timeout */
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40010800 	.word	0x40010800

08001afc <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8001b06:	20c8      	movs	r0, #200	; 0xc8
 8001b08:	f7ff ff36 	bl	8001978 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8001b0c:	20ff      	movs	r0, #255	; 0xff
 8001b0e:	f7ff ff5d 	bl	80019cc <xchg_spi>
 8001b12:	4603      	mov	r3, r0
 8001b14:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	2bff      	cmp	r3, #255	; 0xff
 8001b1a:	d104      	bne.n	8001b26 <rcvr_datablock+0x2a>
 8001b1c:	f7ff ff40 	bl	80019a0 <SPI_Timer_Status>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f2      	bne.n	8001b0c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	2bfe      	cmp	r3, #254	; 0xfe
 8001b2a:	d001      	beq.n	8001b30 <rcvr_datablock+0x34>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	e00a      	b.n	8001b46 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8001b30:	6839      	ldr	r1, [r7, #0]
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ff60 	bl	80019f8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8001b38:	20ff      	movs	r0, #255	; 0xff
 8001b3a:	f7ff ff47 	bl	80019cc <xchg_spi>
 8001b3e:	20ff      	movs	r0, #255	; 0xff
 8001b40:	f7ff ff44 	bl	80019cc <xchg_spi>

	return 1;						/* Function succeeded */
 8001b44:	2301      	movs	r3, #1
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b084      	sub	sp, #16
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	460b      	mov	r3, r1
 8001b58:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8001b5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b5e:	f7ff ff82 	bl	8001a66 <wait_ready>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <xmit_datablock+0x1e>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	e01e      	b.n	8001baa <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff ff2c 	bl	80019cc <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8001b74:	78fb      	ldrb	r3, [r7, #3]
 8001b76:	2bfd      	cmp	r3, #253	; 0xfd
 8001b78:	d016      	beq.n	8001ba8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8001b7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ff56 	bl	8001a30 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8001b84:	20ff      	movs	r0, #255	; 0xff
 8001b86:	f7ff ff21 	bl	80019cc <xchg_spi>
 8001b8a:	20ff      	movs	r0, #255	; 0xff
 8001b8c:	f7ff ff1e 	bl	80019cc <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8001b90:	20ff      	movs	r0, #255	; 0xff
 8001b92:	f7ff ff1b 	bl	80019cc <xchg_spi>
 8001b96:	4603      	mov	r3, r0
 8001b98:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	f003 031f 	and.w	r3, r3, #31
 8001ba0:	2b05      	cmp	r3, #5
 8001ba2:	d001      	beq.n	8001ba8 <xmit_datablock+0x5a>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	e000      	b.n	8001baa <xmit_datablock+0x5c>
	}
	return 1;
 8001ba8:	2301      	movs	r3, #1
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b084      	sub	sp, #16
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	6039      	str	r1, [r7, #0]
 8001bbc:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	da0e      	bge.n	8001be4 <send_cmd+0x32>
		cmd &= 0x7F;
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bcc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8001bce:	2100      	movs	r1, #0
 8001bd0:	2037      	movs	r0, #55	; 0x37
 8001bd2:	f7ff ffee 	bl	8001bb2 <send_cmd>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8001bda:	7bbb      	ldrb	r3, [r7, #14]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d901      	bls.n	8001be4 <send_cmd+0x32>
 8001be0:	7bbb      	ldrb	r3, [r7, #14]
 8001be2:	e051      	b.n	8001c88 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	2b0c      	cmp	r3, #12
 8001be8:	d008      	beq.n	8001bfc <send_cmd+0x4a>
		despiselect();
 8001bea:	f7ff ff5f 	bl	8001aac <despiselect>
		if (!spiselect()) return 0xFF;
 8001bee:	f7ff ff6b 	bl	8001ac8 <spiselect>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <send_cmd+0x4a>
 8001bf8:	23ff      	movs	r3, #255	; 0xff
 8001bfa:	e045      	b.n	8001c88 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fee1 	bl	80019cc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	0e1b      	lsrs	r3, r3, #24
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fedb 	bl	80019cc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	0c1b      	lsrs	r3, r3, #16
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fed5 	bl	80019cc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	0a1b      	lsrs	r3, r3, #8
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fecf 	bl	80019cc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff feca 	bl	80019cc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8001c38:	2301      	movs	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <send_cmd+0x94>
 8001c42:	2395      	movs	r3, #149	; 0x95
 8001c44:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d101      	bne.n	8001c50 <send_cmd+0x9e>
 8001c4c:	2387      	movs	r3, #135	; 0x87
 8001c4e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff feba 	bl	80019cc <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	2b0c      	cmp	r3, #12
 8001c5c:	d102      	bne.n	8001c64 <send_cmd+0xb2>
 8001c5e:	20ff      	movs	r0, #255	; 0xff
 8001c60:	f7ff feb4 	bl	80019cc <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8001c64:	230a      	movs	r3, #10
 8001c66:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8001c68:	20ff      	movs	r0, #255	; 0xff
 8001c6a:	f7ff feaf 	bl	80019cc <xchg_spi>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8001c72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	da05      	bge.n	8001c86 <send_cmd+0xd4>
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <send_cmd+0xb6>

	return res;							/* Return received response */
 8001c86:	7bbb      	ldrb	r3, [r7, #14]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8001c90:	b590      	push	{r4, r7, lr}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <USER_SPI_initialize+0x14>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0d6      	b.n	8001e52 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8001ca4:	4b6d      	ldr	r3, [pc, #436]	; (8001e5c <USER_SPI_initialize+0x1cc>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <USER_SPI_initialize+0x2a>
 8001cb2:	4b6a      	ldr	r3, [pc, #424]	; (8001e5c <USER_SPI_initialize+0x1cc>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	e0cb      	b.n	8001e52 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8001cba:	4b69      	ldr	r3, [pc, #420]	; (8001e60 <USER_SPI_initialize+0x1d0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8001cc4:	4b66      	ldr	r3, [pc, #408]	; (8001e60 <USER_SPI_initialize+0x1d0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8001ccc:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8001cce:	230a      	movs	r3, #10
 8001cd0:	73fb      	strb	r3, [r7, #15]
 8001cd2:	e005      	b.n	8001ce0 <USER_SPI_initialize+0x50>
 8001cd4:	20ff      	movs	r0, #255	; 0xff
 8001cd6:	f7ff fe79 	bl	80019cc <xchg_spi>
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f6      	bne.n	8001cd4 <USER_SPI_initialize+0x44>

	ty = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8001cea:	2100      	movs	r1, #0
 8001cec:	2000      	movs	r0, #0
 8001cee:	f7ff ff60 	bl	8001bb2 <send_cmd>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	f040 808b 	bne.w	8001e10 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8001cfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cfe:	f7ff fe3b 	bl	8001978 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8001d02:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001d06:	2008      	movs	r0, #8
 8001d08:	f7ff ff53 	bl	8001bb2 <send_cmd>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d151      	bne.n	8001db6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8001d12:	2300      	movs	r3, #0
 8001d14:	73fb      	strb	r3, [r7, #15]
 8001d16:	e00d      	b.n	8001d34 <USER_SPI_initialize+0xa4>
 8001d18:	7bfc      	ldrb	r4, [r7, #15]
 8001d1a:	20ff      	movs	r0, #255	; 0xff
 8001d1c:	f7ff fe56 	bl	80019cc <xchg_spi>
 8001d20:	4603      	mov	r3, r0
 8001d22:	461a      	mov	r2, r3
 8001d24:	f107 0310 	add.w	r3, r7, #16
 8001d28:	4423      	add	r3, r4
 8001d2a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	3301      	adds	r3, #1
 8001d32:	73fb      	strb	r3, [r7, #15]
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	d9ee      	bls.n	8001d18 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8001d3a:	7abb      	ldrb	r3, [r7, #10]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d167      	bne.n	8001e10 <USER_SPI_initialize+0x180>
 8001d40:	7afb      	ldrb	r3, [r7, #11]
 8001d42:	2baa      	cmp	r3, #170	; 0xaa
 8001d44:	d164      	bne.n	8001e10 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8001d46:	bf00      	nop
 8001d48:	f7ff fe2a 	bl	80019a0 <SPI_Timer_Status>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d007      	beq.n	8001d62 <USER_SPI_initialize+0xd2>
 8001d52:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d56:	20a9      	movs	r0, #169	; 0xa9
 8001d58:	f7ff ff2b 	bl	8001bb2 <send_cmd>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f2      	bne.n	8001d48 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8001d62:	f7ff fe1d 	bl	80019a0 <SPI_Timer_Status>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d051      	beq.n	8001e10 <USER_SPI_initialize+0x180>
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	203a      	movs	r0, #58	; 0x3a
 8001d70:	f7ff ff1f 	bl	8001bb2 <send_cmd>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d14a      	bne.n	8001e10 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	73fb      	strb	r3, [r7, #15]
 8001d7e:	e00d      	b.n	8001d9c <USER_SPI_initialize+0x10c>
 8001d80:	7bfc      	ldrb	r4, [r7, #15]
 8001d82:	20ff      	movs	r0, #255	; 0xff
 8001d84:	f7ff fe22 	bl	80019cc <xchg_spi>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f107 0310 	add.w	r3, r7, #16
 8001d90:	4423      	add	r3, r4
 8001d92:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	73fb      	strb	r3, [r7, #15]
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d9ee      	bls.n	8001d80 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8001da2:	7a3b      	ldrb	r3, [r7, #8]
 8001da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <USER_SPI_initialize+0x120>
 8001dac:	230c      	movs	r3, #12
 8001dae:	e000      	b.n	8001db2 <USER_SPI_initialize+0x122>
 8001db0:	2304      	movs	r3, #4
 8001db2:	737b      	strb	r3, [r7, #13]
 8001db4:	e02c      	b.n	8001e10 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8001db6:	2100      	movs	r1, #0
 8001db8:	20a9      	movs	r0, #169	; 0xa9
 8001dba:	f7ff fefa 	bl	8001bb2 <send_cmd>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d804      	bhi.n	8001dce <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	737b      	strb	r3, [r7, #13]
 8001dc8:	23a9      	movs	r3, #169	; 0xa9
 8001dca:	73bb      	strb	r3, [r7, #14]
 8001dcc:	e003      	b.n	8001dd6 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8001dce:	2301      	movs	r3, #1
 8001dd0:	737b      	strb	r3, [r7, #13]
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8001dd6:	bf00      	nop
 8001dd8:	f7ff fde2 	bl	80019a0 <SPI_Timer_Status>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d007      	beq.n	8001df2 <USER_SPI_initialize+0x162>
 8001de2:	7bbb      	ldrb	r3, [r7, #14]
 8001de4:	2100      	movs	r1, #0
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fee3 	bl	8001bb2 <send_cmd>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f2      	bne.n	8001dd8 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8001df2:	f7ff fdd5 	bl	80019a0 <SPI_Timer_Status>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <USER_SPI_initialize+0x17c>
 8001dfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e00:	2010      	movs	r0, #16
 8001e02:	f7ff fed6 	bl	8001bb2 <send_cmd>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <USER_SPI_initialize+0x180>
				ty = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8001e10:	4a14      	ldr	r2, [pc, #80]	; (8001e64 <USER_SPI_initialize+0x1d4>)
 8001e12:	7b7b      	ldrb	r3, [r7, #13]
 8001e14:	7013      	strb	r3, [r2, #0]
	despiselect();
 8001e16:	f7ff fe49 	bl	8001aac <despiselect>

	if (ty) {			/* OK */
 8001e1a:	7b7b      	ldrb	r3, [r7, #13]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d012      	beq.n	8001e46 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <USER_SPI_initialize+0x1d0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <USER_SPI_initialize+0x1d0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0210 	orr.w	r2, r2, #16
 8001e32:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8001e34:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <USER_SPI_initialize+0x1cc>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	f023 0301 	bic.w	r3, r3, #1
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <USER_SPI_initialize+0x1cc>)
 8001e42:	701a      	strb	r2, [r3, #0]
 8001e44:	e002      	b.n	8001e4c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <USER_SPI_initialize+0x1cc>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <USER_SPI_initialize+0x1cc>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	b2db      	uxtb	r3, r3
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd90      	pop	{r4, r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000020 	.word	0x20000020
 8001e60:	200002e8 	.word	0x200002e8
 8001e64:	20000040 	.word	0x20000040

08001e68 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <USER_SPI_status+0x14>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e002      	b.n	8001e82 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8001e7c:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <USER_SPI_status+0x24>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	b2db      	uxtb	r3, r3
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	20000020 	.word	0x20000020

08001e90 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d102      	bne.n	8001eac <USER_SPI_read+0x1c>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <USER_SPI_read+0x20>
 8001eac:	2304      	movs	r3, #4
 8001eae:	e04d      	b.n	8001f4c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8001eb0:	4b28      	ldr	r3, [pc, #160]	; (8001f54 <USER_SPI_read+0xc4>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <USER_SPI_read+0x32>
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e044      	b.n	8001f4c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8001ec2:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <USER_SPI_read+0xc8>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d102      	bne.n	8001ed4 <USER_SPI_read+0x44>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	025b      	lsls	r3, r3, #9
 8001ed2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d111      	bne.n	8001efe <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	2011      	movs	r0, #17
 8001ede:	f7ff fe68 	bl	8001bb2 <send_cmd>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d129      	bne.n	8001f3c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8001ee8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001eec:	68b8      	ldr	r0, [r7, #8]
 8001eee:	f7ff fe05 	bl	8001afc <rcvr_datablock>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d021      	beq.n	8001f3c <USER_SPI_read+0xac>
			count = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	e01e      	b.n	8001f3c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	2012      	movs	r0, #18
 8001f02:	f7ff fe56 	bl	8001bb2 <send_cmd>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d117      	bne.n	8001f3c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8001f0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f10:	68b8      	ldr	r0, [r7, #8]
 8001f12:	f7ff fdf3 	bl	8001afc <rcvr_datablock>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00a      	beq.n	8001f32 <USER_SPI_read+0xa2>
				buff += 512;
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001f22:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	603b      	str	r3, [r7, #0]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1ed      	bne.n	8001f0c <USER_SPI_read+0x7c>
 8001f30:	e000      	b.n	8001f34 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8001f32:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8001f34:	2100      	movs	r1, #0
 8001f36:	200c      	movs	r0, #12
 8001f38:	f7ff fe3b 	bl	8001bb2 <send_cmd>
		}
	}
	despiselect();
 8001f3c:	f7ff fdb6 	bl	8001aac <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	bf14      	ite	ne
 8001f46:	2301      	movne	r3, #1
 8001f48:	2300      	moveq	r3, #0
 8001f4a:	b2db      	uxtb	r3, r3
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000020 	.word	0x20000020
 8001f58:	20000040 	.word	0x20000040

08001f5c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	4603      	mov	r3, r0
 8001f6a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d102      	bne.n	8001f78 <USER_SPI_write+0x1c>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <USER_SPI_write+0x20>
 8001f78:	2304      	movs	r3, #4
 8001f7a:	e063      	b.n	8002044 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8001f7c:	4b33      	ldr	r3, [pc, #204]	; (800204c <USER_SPI_write+0xf0>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <USER_SPI_write+0x32>
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e05a      	b.n	8002044 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8001f8e:	4b2f      	ldr	r3, [pc, #188]	; (800204c <USER_SPI_write+0xf0>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <USER_SPI_write+0x44>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e051      	b.n	8002044 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8001fa0:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <USER_SPI_write+0xf4>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	f003 0308 	and.w	r3, r3, #8
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d102      	bne.n	8001fb2 <USER_SPI_write+0x56>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	025b      	lsls	r3, r3, #9
 8001fb0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d110      	bne.n	8001fda <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	2018      	movs	r0, #24
 8001fbc:	f7ff fdf9 	bl	8001bb2 <send_cmd>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d136      	bne.n	8002034 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8001fc6:	21fe      	movs	r1, #254	; 0xfe
 8001fc8:	68b8      	ldr	r0, [r7, #8]
 8001fca:	f7ff fdc0 	bl	8001b4e <xmit_datablock>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d02f      	beq.n	8002034 <USER_SPI_write+0xd8>
			count = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	e02c      	b.n	8002034 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8001fda:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <USER_SPI_write+0xf4>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	f003 0306 	and.w	r3, r3, #6
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <USER_SPI_write+0x92>
 8001fe6:	6839      	ldr	r1, [r7, #0]
 8001fe8:	2097      	movs	r0, #151	; 0x97
 8001fea:	f7ff fde2 	bl	8001bb2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	2019      	movs	r0, #25
 8001ff2:	f7ff fdde 	bl	8001bb2 <send_cmd>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d11b      	bne.n	8002034 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8001ffc:	21fc      	movs	r1, #252	; 0xfc
 8001ffe:	68b8      	ldr	r0, [r7, #8]
 8002000:	f7ff fda5 	bl	8001b4e <xmit_datablock>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00a      	beq.n	8002020 <USER_SPI_write+0xc4>
				buff += 512;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002010:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	3b01      	subs	r3, #1
 8002016:	603b      	str	r3, [r7, #0]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1ee      	bne.n	8001ffc <USER_SPI_write+0xa0>
 800201e:	e000      	b.n	8002022 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8002020:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8002022:	21fd      	movs	r1, #253	; 0xfd
 8002024:	2000      	movs	r0, #0
 8002026:	f7ff fd92 	bl	8001b4e <xmit_datablock>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <USER_SPI_write+0xd8>
 8002030:	2301      	movs	r3, #1
 8002032:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8002034:	f7ff fd3a 	bl	8001aac <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	bf14      	ite	ne
 800203e:	2301      	movne	r3, #1
 8002040:	2300      	moveq	r3, #0
 8002042:	b2db      	uxtb	r3, r3
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20000020 	.word	0x20000020
 8002050:	20000040 	.word	0x20000040

08002054 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08c      	sub	sp, #48	; 0x30
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	603a      	str	r2, [r7, #0]
 800205e:	71fb      	strb	r3, [r7, #7]
 8002060:	460b      	mov	r3, r1
 8002062:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <USER_SPI_ioctl+0x1a>
 800206a:	2304      	movs	r3, #4
 800206c:	e15a      	b.n	8002324 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800206e:	4baf      	ldr	r3, [pc, #700]	; (800232c <USER_SPI_ioctl+0x2d8>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <USER_SPI_ioctl+0x2c>
 800207c:	2303      	movs	r3, #3
 800207e:	e151      	b.n	8002324 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8002086:	79bb      	ldrb	r3, [r7, #6]
 8002088:	2b04      	cmp	r3, #4
 800208a:	f200 8136 	bhi.w	80022fa <USER_SPI_ioctl+0x2a6>
 800208e:	a201      	add	r2, pc, #4	; (adr r2, 8002094 <USER_SPI_ioctl+0x40>)
 8002090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002094:	080020a9 	.word	0x080020a9
 8002098:	080020bd 	.word	0x080020bd
 800209c:	080022fb 	.word	0x080022fb
 80020a0:	08002169 	.word	0x08002169
 80020a4:	0800225f 	.word	0x0800225f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80020a8:	f7ff fd0e 	bl	8001ac8 <spiselect>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 8127 	beq.w	8002302 <USER_SPI_ioctl+0x2ae>
 80020b4:	2300      	movs	r3, #0
 80020b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80020ba:	e122      	b.n	8002302 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80020bc:	2100      	movs	r1, #0
 80020be:	2009      	movs	r0, #9
 80020c0:	f7ff fd77 	bl	8001bb2 <send_cmd>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f040 811d 	bne.w	8002306 <USER_SPI_ioctl+0x2b2>
 80020cc:	f107 030c 	add.w	r3, r7, #12
 80020d0:	2110      	movs	r1, #16
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff fd12 	bl	8001afc <rcvr_datablock>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 8113 	beq.w	8002306 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80020e0:	7b3b      	ldrb	r3, [r7, #12]
 80020e2:	099b      	lsrs	r3, r3, #6
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d111      	bne.n	800210e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80020ea:	7d7b      	ldrb	r3, [r7, #21]
 80020ec:	461a      	mov	r2, r3
 80020ee:	7d3b      	ldrb	r3, [r7, #20]
 80020f0:	021b      	lsls	r3, r3, #8
 80020f2:	4413      	add	r3, r2
 80020f4:	461a      	mov	r2, r3
 80020f6:	7cfb      	ldrb	r3, [r7, #19]
 80020f8:	041b      	lsls	r3, r3, #16
 80020fa:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80020fe:	4413      	add	r3, r2
 8002100:	3301      	adds	r3, #1
 8002102:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	029a      	lsls	r2, r3, #10
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	e028      	b.n	8002160 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800210e:	7c7b      	ldrb	r3, [r7, #17]
 8002110:	f003 030f 	and.w	r3, r3, #15
 8002114:	b2da      	uxtb	r2, r3
 8002116:	7dbb      	ldrb	r3, [r7, #22]
 8002118:	09db      	lsrs	r3, r3, #7
 800211a:	b2db      	uxtb	r3, r3
 800211c:	4413      	add	r3, r2
 800211e:	b2da      	uxtb	r2, r3
 8002120:	7d7b      	ldrb	r3, [r7, #21]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	b2db      	uxtb	r3, r3
 8002126:	f003 0306 	and.w	r3, r3, #6
 800212a:	b2db      	uxtb	r3, r3
 800212c:	4413      	add	r3, r2
 800212e:	b2db      	uxtb	r3, r3
 8002130:	3302      	adds	r3, #2
 8002132:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002136:	7d3b      	ldrb	r3, [r7, #20]
 8002138:	099b      	lsrs	r3, r3, #6
 800213a:	b2db      	uxtb	r3, r3
 800213c:	461a      	mov	r2, r3
 800213e:	7cfb      	ldrb	r3, [r7, #19]
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	441a      	add	r2, r3
 8002144:	7cbb      	ldrb	r3, [r7, #18]
 8002146:	029b      	lsls	r3, r3, #10
 8002148:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800214c:	4413      	add	r3, r2
 800214e:	3301      	adds	r3, #1
 8002150:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8002152:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002156:	3b09      	subs	r3, #9
 8002158:	69fa      	ldr	r2, [r7, #28]
 800215a:	409a      	lsls	r2, r3
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002166:	e0ce      	b.n	8002306 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002168:	4b71      	ldr	r3, [pc, #452]	; (8002330 <USER_SPI_ioctl+0x2dc>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d031      	beq.n	80021d8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002174:	2100      	movs	r1, #0
 8002176:	208d      	movs	r0, #141	; 0x8d
 8002178:	f7ff fd1b 	bl	8001bb2 <send_cmd>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	f040 80c3 	bne.w	800230a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8002184:	20ff      	movs	r0, #255	; 0xff
 8002186:	f7ff fc21 	bl	80019cc <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800218a:	f107 030c 	add.w	r3, r7, #12
 800218e:	2110      	movs	r1, #16
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fcb3 	bl	8001afc <rcvr_datablock>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80b6 	beq.w	800230a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800219e:	2330      	movs	r3, #48	; 0x30
 80021a0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80021a4:	e007      	b.n	80021b6 <USER_SPI_ioctl+0x162>
 80021a6:	20ff      	movs	r0, #255	; 0xff
 80021a8:	f7ff fc10 	bl	80019cc <xchg_spi>
 80021ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80021b0:	3b01      	subs	r3, #1
 80021b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80021b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f3      	bne.n	80021a6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80021be:	7dbb      	ldrb	r3, [r7, #22]
 80021c0:	091b      	lsrs	r3, r3, #4
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	2310      	movs	r3, #16
 80021c8:	fa03 f202 	lsl.w	r2, r3, r2
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80021d6:	e098      	b.n	800230a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80021d8:	2100      	movs	r1, #0
 80021da:	2009      	movs	r0, #9
 80021dc:	f7ff fce9 	bl	8001bb2 <send_cmd>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f040 8091 	bne.w	800230a <USER_SPI_ioctl+0x2b6>
 80021e8:	f107 030c 	add.w	r3, r7, #12
 80021ec:	2110      	movs	r1, #16
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fc84 	bl	8001afc <rcvr_datablock>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 8087 	beq.w	800230a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80021fc:	4b4c      	ldr	r3, [pc, #304]	; (8002330 <USER_SPI_ioctl+0x2dc>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d012      	beq.n	800222e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8002208:	7dbb      	ldrb	r3, [r7, #22]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002210:	7dfa      	ldrb	r2, [r7, #23]
 8002212:	09d2      	lsrs	r2, r2, #7
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	4413      	add	r3, r2
 8002218:	1c5a      	adds	r2, r3, #1
 800221a:	7e7b      	ldrb	r3, [r7, #25]
 800221c:	099b      	lsrs	r3, r3, #6
 800221e:	b2db      	uxtb	r3, r3
 8002220:	3b01      	subs	r3, #1
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	461a      	mov	r2, r3
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	e013      	b.n	8002256 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800222e:	7dbb      	ldrb	r3, [r7, #22]
 8002230:	109b      	asrs	r3, r3, #2
 8002232:	b29b      	uxth	r3, r3
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	3301      	adds	r3, #1
 800223a:	7dfa      	ldrb	r2, [r7, #23]
 800223c:	00d2      	lsls	r2, r2, #3
 800223e:	f002 0218 	and.w	r2, r2, #24
 8002242:	7df9      	ldrb	r1, [r7, #23]
 8002244:	0949      	lsrs	r1, r1, #5
 8002246:	b2c9      	uxtb	r1, r1
 8002248:	440a      	add	r2, r1
 800224a:	3201      	adds	r2, #1
 800224c:	fb02 f303 	mul.w	r3, r2, r3
 8002250:	461a      	mov	r2, r3
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800225c:	e055      	b.n	800230a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800225e:	4b34      	ldr	r3, [pc, #208]	; (8002330 <USER_SPI_ioctl+0x2dc>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	f003 0306 	and.w	r3, r3, #6
 8002266:	2b00      	cmp	r3, #0
 8002268:	d051      	beq.n	800230e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800226a:	f107 020c 	add.w	r2, r7, #12
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	210b      	movs	r1, #11
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff feee 	bl	8002054 <USER_SPI_ioctl>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d149      	bne.n	8002312 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800227e:	7b3b      	ldrb	r3, [r7, #12]
 8002280:	099b      	lsrs	r3, r3, #6
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d104      	bne.n	8002292 <USER_SPI_ioctl+0x23e>
 8002288:	7dbb      	ldrb	r3, [r7, #22]
 800228a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	d041      	beq.n	8002316 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	623b      	str	r3, [r7, #32]
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80022a2:	4b23      	ldr	r3, [pc, #140]	; (8002330 <USER_SPI_ioctl+0x2dc>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d105      	bne.n	80022ba <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80022ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b0:	025b      	lsls	r3, r3, #9
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	025b      	lsls	r3, r3, #9
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80022ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022bc:	2020      	movs	r0, #32
 80022be:	f7ff fc78 	bl	8001bb2 <send_cmd>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d128      	bne.n	800231a <USER_SPI_ioctl+0x2c6>
 80022c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022ca:	2021      	movs	r0, #33	; 0x21
 80022cc:	f7ff fc71 	bl	8001bb2 <send_cmd>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d121      	bne.n	800231a <USER_SPI_ioctl+0x2c6>
 80022d6:	2100      	movs	r1, #0
 80022d8:	2026      	movs	r0, #38	; 0x26
 80022da:	f7ff fc6a 	bl	8001bb2 <send_cmd>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d11a      	bne.n	800231a <USER_SPI_ioctl+0x2c6>
 80022e4:	f247 5030 	movw	r0, #30000	; 0x7530
 80022e8:	f7ff fbbd 	bl	8001a66 <wait_ready>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d013      	beq.n	800231a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80022f2:	2300      	movs	r3, #0
 80022f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80022f8:	e00f      	b.n	800231a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80022fa:	2304      	movs	r3, #4
 80022fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002300:	e00c      	b.n	800231c <USER_SPI_ioctl+0x2c8>
		break;
 8002302:	bf00      	nop
 8002304:	e00a      	b.n	800231c <USER_SPI_ioctl+0x2c8>
		break;
 8002306:	bf00      	nop
 8002308:	e008      	b.n	800231c <USER_SPI_ioctl+0x2c8>
		break;
 800230a:	bf00      	nop
 800230c:	e006      	b.n	800231c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800230e:	bf00      	nop
 8002310:	e004      	b.n	800231c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002312:	bf00      	nop
 8002314:	e002      	b.n	800231c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002316:	bf00      	nop
 8002318:	e000      	b.n	800231c <USER_SPI_ioctl+0x2c8>
		break;
 800231a:	bf00      	nop
	}

	despiselect();
 800231c:	f7ff fbc6 	bl	8001aac <despiselect>

	return res;
 8002320:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002324:	4618      	mov	r0, r3
 8002326:	3730      	adds	r7, #48	; 0x30
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000020 	.word	0x20000020
 8002330:	20000040 	.word	0x20000040

08002334 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	4613      	mov	r3, r2
 8002340:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8002342:	2301      	movs	r3, #1
 8002344:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8002346:	2300      	movs	r3, #0
 8002348:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800234a:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <FATFS_LinkDriverEx+0x90>)
 800234c:	7a5b      	ldrb	r3, [r3, #9]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b01      	cmp	r3, #1
 8002352:	d831      	bhi.n	80023b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8002354:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <FATFS_LinkDriverEx+0x90>)
 8002356:	7a5b      	ldrb	r3, [r3, #9]
 8002358:	b2db      	uxtb	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <FATFS_LinkDriverEx+0x90>)
 800235e:	2100      	movs	r1, #0
 8002360:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <FATFS_LinkDriverEx+0x90>)
 8002364:	7a5b      	ldrb	r3, [r3, #9]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	4a16      	ldr	r2, [pc, #88]	; (80023c4 <FATFS_LinkDriverEx+0x90>)
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8002372:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <FATFS_LinkDriverEx+0x90>)
 8002374:	7a5b      	ldrb	r3, [r3, #9]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <FATFS_LinkDriverEx+0x90>)
 800237c:	4413      	add	r3, r2
 800237e:	79fa      	ldrb	r2, [r7, #7]
 8002380:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <FATFS_LinkDriverEx+0x90>)
 8002384:	7a5b      	ldrb	r3, [r3, #9]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	b2d1      	uxtb	r1, r2
 800238c:	4a0d      	ldr	r2, [pc, #52]	; (80023c4 <FATFS_LinkDriverEx+0x90>)
 800238e:	7251      	strb	r1, [r2, #9]
 8002390:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8002392:	7dbb      	ldrb	r3, [r7, #22]
 8002394:	3330      	adds	r3, #48	; 0x30
 8002396:	b2da      	uxtb	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	3301      	adds	r3, #1
 80023a0:	223a      	movs	r2, #58	; 0x3a
 80023a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	3302      	adds	r3, #2
 80023a8:	222f      	movs	r2, #47	; 0x2f
 80023aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	3303      	adds	r3, #3
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80023b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	371c      	adds	r7, #28
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	20000044 	.word	0x20000044

080023c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80023d2:	2200      	movs	r2, #0
 80023d4:	6839      	ldr	r1, [r7, #0]
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff ffac 	bl	8002334 <FATFS_LinkDriverEx>
 80023dc:	4603      	mov	r3, r0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <__libc_init_array>:
 80023e8:	b570      	push	{r4, r5, r6, lr}
 80023ea:	2600      	movs	r6, #0
 80023ec:	4d0c      	ldr	r5, [pc, #48]	; (8002420 <__libc_init_array+0x38>)
 80023ee:	4c0d      	ldr	r4, [pc, #52]	; (8002424 <__libc_init_array+0x3c>)
 80023f0:	1b64      	subs	r4, r4, r5
 80023f2:	10a4      	asrs	r4, r4, #2
 80023f4:	42a6      	cmp	r6, r4
 80023f6:	d109      	bne.n	800240c <__libc_init_array+0x24>
 80023f8:	f000 f822 	bl	8002440 <_init>
 80023fc:	2600      	movs	r6, #0
 80023fe:	4d0a      	ldr	r5, [pc, #40]	; (8002428 <__libc_init_array+0x40>)
 8002400:	4c0a      	ldr	r4, [pc, #40]	; (800242c <__libc_init_array+0x44>)
 8002402:	1b64      	subs	r4, r4, r5
 8002404:	10a4      	asrs	r4, r4, #2
 8002406:	42a6      	cmp	r6, r4
 8002408:	d105      	bne.n	8002416 <__libc_init_array+0x2e>
 800240a:	bd70      	pop	{r4, r5, r6, pc}
 800240c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002410:	4798      	blx	r3
 8002412:	3601      	adds	r6, #1
 8002414:	e7ee      	b.n	80023f4 <__libc_init_array+0xc>
 8002416:	f855 3b04 	ldr.w	r3, [r5], #4
 800241a:	4798      	blx	r3
 800241c:	3601      	adds	r6, #1
 800241e:	e7f2      	b.n	8002406 <__libc_init_array+0x1e>
 8002420:	08002478 	.word	0x08002478
 8002424:	08002478 	.word	0x08002478
 8002428:	08002478 	.word	0x08002478
 800242c:	0800247c 	.word	0x0800247c

08002430 <memset>:
 8002430:	4603      	mov	r3, r0
 8002432:	4402      	add	r2, r0
 8002434:	4293      	cmp	r3, r2
 8002436:	d100      	bne.n	800243a <memset+0xa>
 8002438:	4770      	bx	lr
 800243a:	f803 1b01 	strb.w	r1, [r3], #1
 800243e:	e7f9      	b.n	8002434 <memset+0x4>

08002440 <_init>:
 8002440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002442:	bf00      	nop
 8002444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002446:	bc08      	pop	{r3}
 8002448:	469e      	mov	lr, r3
 800244a:	4770      	bx	lr

0800244c <_fini>:
 800244c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800244e:	bf00      	nop
 8002450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002452:	bc08      	pop	{r3}
 8002454:	469e      	mov	lr, r3
 8002456:	4770      	bx	lr
